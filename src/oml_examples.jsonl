{"id": "pizza_vocabulary_001", "title": "Pizza Vocabulary and IdentifiedThing Aspect", "description": "Defines the pizza vocabulary, ontology extensions, and IdentifiedThing aspect.", "tags": ["vocabulary", "ontology", "pizza"], "input": "Define a vocabulary for pizzas, extend necessary ontologies, and establish a unique identification aspect.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]\n}"}
{"id": "pizza_vocabulary_002", "title": "Pizza Vocabulary: IdentifiedThing and Food Concept", "description": "Defines the pizza vocabulary, ontology extensions, IdentifiedThing aspect, and the Food concept.", "tags": ["vocabulary", "ontology", "pizza", "food"], "input": "Define a vocabulary for pizzas, extend necessary ontologies, establish a unique identification aspect, and introduce the Food concept.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]   \n\n    // Identified Things\n\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n}"}
{"id": "pizza_vocabulary_003", "title": "Pizza Vocabulary: Food Concept and HasIngredient Relation", "description": "Defines the pizza vocabulary, ontology extensions, IdentifiedThing aspect, Food concept, and the HasIngredient relation.", "tags": ["vocabulary", "ontology", "pizza", "food", "relations"], "input": "Define a vocabulary for pizzas, extend necessary ontologies, establish a unique identification aspect, introduce the Food concept, and define a relation for ingredients.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]   \n\n    // Identified Things\n\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n\n    @rdfs:comment \"A relation from a food to another used as an ingredient\"\n    relation entity HasIngredient [\n        from Food\n        to Food\n        forward hasIngredient\n        reverse isIngredientOf\n        transitive\n    ]\n}"}
{"id": "pizza_vocabulary_004", "title": "Pizza Vocabulary: Spiciness Enumeration", "description": "Expands the pizza vocabulary with an enumeration for spiciness levels, defining 'Hot', 'Medium', and 'Mild'.", "tags": ["vocabulary", "ontology", "pizza", "food", "spiciness"], "input": "Extend the pizza vocabulary to include an enumeration for spiciness levels.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]   \n\n    // Identified Things\n\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n\n    @rdfs:comment \"A relation from a food to another used as an ingredient\"\n    relation entity HasIngredient [\n        from Food\n        to Food\n        forward hasIngredient\n        reverse isIngredientOf\n        transitive\n    ]\n\n    @rdfs:comment \"An enumeration of spiciness levels\"\n    scalar Spiciness [\n        oneOf \"Hot\", \"Medium\", \"Mild\"\n    ]\n}"}
{"id": "pizza_vocabulary_005", "title": "Pizza Vocabulary: Spiciness Property for Food Items", "description": "Adds a spiciness property to food items, allowing classification based on predefined spiciness levels.", "tags": ["vocabulary", "ontology", "pizza", "food", "spiciness"], "input": "Extend the pizza vocabulary to include a property that assigns a spiciness level to food items.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]   \n\n    // Identified Things\n\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n\n    @rdfs:comment \"A relation from a food to another used as an ingredient\"\n    relation entity HasIngredient [\n        from Food\n        to Food\n        forward hasIngredient\n        reverse isIngredientOf\n        transitive\n    ]\n\n    @rdfs:comment \"An enumeration of spiciness levels\"\n    scalar Spiciness [\n        oneOf \"Hot\", \"Medium\", \"Mild\"\n    ]\n\n    @rdfs:comment \"The spiciness property of a food item\"\n    scalar property hasSpiceness [\n        domain Food\n        range Spiciness\n        functional\n    ]\n}"}  
{"id": "pizza_vocabulary_006", "title": "Pizza Vocabulary: Pizza Concept with Base Restriction", "description": "Defines a Pizza as a subclass of Food and restricts its base to a specific category of PizzaBase.", "tags": ["vocabulary", "ontology", "pizza", "food", "base"], "input": "Extend the pizza vocabulary to include the Pizza concept, which is a specialized type of Food with a restricted base.", "output": "@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n\n    extends <http://purl.org/dc/elements/1.1/> as dc\n\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\n    // Top Level\n\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    \n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]   \n\n    // Identified Things\n\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n\n    @rdfs:comment \"A relation from a food to another used as an ingredient\"\n    relation entity HasIngredient [\n        from Food\n        to Food\n        forward hasIngredient\n        reverse isIngredientOf\n        transitive\n    ]\n\n    @rdfs:comment \"An enumeration of spiciness levels\"\n    scalar Spiciness [\n        oneOf \"Hot\", \"Medium\", \"Mild\"\n    ]\n\n    @rdfs:comment \"The spiciness property of a food item\"\n    scalar property hasSpiceness [\n        domain Food\n        range Spiciness\n        functional\n    ]\n    \n    // Foods\n    \n    @rdfs:comment \"The class of pizzas\"\n    concept Pizza < Food [\n        restricts some hasBase to PizzaBase\n    ]\n}"}
{"id":"pizza_vocabulary_007","title":"Pizza Vocabulary: PizzaBase Concept","description":"Defines the PizzaBase concept as a subclass of Food, representing different types of pizza bases.","tags":["vocabulary","ontology","pizza","food","base"],"input":"Extend the pizza vocabulary to include a PizzaBase concept as a subclass of Food.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food }"}
{"id":"pizza_vocabulary_008","title":"Pizza Vocabulary: PizzaTopping Concept","description":"Defines the PizzaTopping concept as a subclass of Food, representing the different types of pizza toppings.","tags":["vocabulary","ontology","pizza","food","topping"],"input":"Extend the pizza vocabulary to include a PizzaTopping concept as a subclass of Food.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food }"}
{"id":"pizza_vocabulary_009","title":"Pizza Vocabulary: HasBase Relation","description":"Defines the relation between a pizza and its base, including forward and reverse properties and functionality.","tags":["vocabulary","ontology","pizza","base","relation"],"input":"Extend the pizza vocabulary to include a HasBase relation between Pizza and PizzaBase concepts.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient }"}
{"id":"pizza_vocabulary_010","title":"Pizza Vocabulary: HasTopping Relation","description":"Defines the relation between a pizza and its toppings, including forward and reverse properties and functionality.","tags":["vocabulary","ontology","pizza","topping","relation"],"input":"Extend the pizza vocabulary to include a HasTopping relation between Pizza and PizzaTopping concepts.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient }"}
{"id":"pizza_vocabulary_011","title":"Pizza Vocabulary: CheesyPizza Concept","description":"Defines the CheesyPizza concept, which restricts toppings to CheeseTopping for pizzas with cheese.","tags":["vocabulary","ontology","pizza","cheese","concept"],"input":"Extend the pizza vocabulary to include the CheesyPizza concept, which restricts toppings to CheeseTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] }"}
{"id":"pizza_vocabulary_012","title":"Pizza Vocabulary: MeatyPizza Concept","description":"Defines the MeatyPizza concept, which restricts toppings to MeatTopping for pizzas with meat.","tags":["vocabulary","ontology","pizza","meat","concept"],"input":"Extend the pizza vocabulary to include the MeatyPizza concept, which restricts toppings to MeatTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] }"}
{"id":"pizza_vocabulary_013","title":"Pizza Vocabulary: VegetarianPizza Concept","description":"Defines the VegetarianPizza concept, which restricts toppings to VegetarianTopping for pizzas with all vegetarian toppings.","tags":["vocabulary","ontology","pizza","vegetarian","concept"],"input":"Extend the pizza vocabulary to include the VegetarianPizza concept, which restricts toppings to VegetarianTopping for pizzas with all vegetarian toppings.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] }"}
{"id":"pizza_vocabulary_014","title":"Pizza Vocabulary: American Concept","description":"Defines the American concept, combining CheesyPizza and MeatyPizza with specific topping restrictions (Mozzarella, Sausage, and Tomato).","tags":["vocabulary","ontology","pizza","american","concept"],"input":"Extend the pizza vocabulary to include the American concept, combining CheesyPizza and MeatyPizza with specific topping restrictions (MozzarellaTopping, SausageTopping, TomatoTopping).","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] }"}
{"id":"pizza_vocabulary_015","title":"Pizza Vocabulary: Veneziana Concept","description":"Defines the Veneziana concept, combining CheesyPizza and MeatyPizza with specific topping restrictions (Mozzarella, Tomato, and Sultana).","tags":["vocabulary","ontology","pizza","veneziana","concept"],"input":"Extend the pizza vocabulary to include the Veneziana concept, combining CheesyPizza and MeatyPizza with specific topping restrictions (MozzarellaTopping, TomatoTopping, SultanaTopping).","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] }"}
{"id":"pizza_vocabulary_016","title":"Pizza Vocabulary: Margherita Concept","description":"Defines the Margherita concept, combining CheesyPizza and VegetarianPizza with specific topping restrictions (Mozzarella and Tomato).","tags":["vocabulary","ontology","pizza","margherita","concept"],"input":"Extend the pizza vocabulary to include the Margherita concept, combining CheesyPizza and VegetarianPizza with specific topping restrictions (MozzarellaTopping, TomatoTopping).","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] }"}
{"id":"pizza_vocabulary_017","title":"Pizza Vocabulary: Deep Pan Base Concept","description":"Defines the DeepPanBase concept as a specialized type of PizzaBase.","tags":["vocabulary","ontology","pizza","base","deep-pan","concept"],"input":"Extend the pizza vocabulary to include the DeepPanBase concept as a specialized type of PizzaBase.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase }"}
{"id":"pizza_vocabulary_018","title":"Pizza Vocabulary: Thin and Crispy Base Concept","description":"Defines the ThinAndCrispyBase concept as a specialized type of PizzaBase.","tags":["vocabulary","ontology","pizza","base","thin-and-crispy","concept"],"input":"Extend the pizza vocabulary to include the ThinAndCrispyBase concept as a specialized type of PizzaBase.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase }"}
{"id":"pizza_vocabulary_019","title":"Pizza Vocabulary: Meat Topping Concept","description":"Defines the MeatTopping concept as a specialized type of PizzaTopping.","tags":["vocabulary","ontology","pizza","topping","meat","concept"],"input":"Extend the pizza vocabulary to include the MeatTopping concept as a specialized type of PizzaTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping }"}
{"id":"pizza_vocabulary_020","title":"Pizza Vocabulary: Vegetarian Topping Concept","description":"Defines the VegetarianTopping concept as a specialized type of PizzaTopping.","tags":["vocabulary","ontology","pizza","topping","vegetarian","concept"],"input":"Extend the pizza vocabulary to include the VegetarianTopping concept as a specialized type of PizzaTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping }"}
{"id":"pizza_vocabulary_021","title":"Pizza Vocabulary: Hot Topping Concept","description":"Defines the HotTopping concept as a specialized type of PizzaTopping with hot spiciness level.","tags":["vocabulary","ontology","pizza","topping","hot","spicy","concept"],"input":"Extend the pizza vocabulary to include the HotTopping concept as a specialized type of PizzaTopping with hot spiciness level.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] }"}
{"id":"pizza_vocabulary_022","title":"Pizza Vocabulary: Medium Topping Concept","description":"Defines the MediumTopping concept as a specialized type of PizzaTopping with medium spiciness level.","tags":["vocabulary","ontology","pizza","topping","medium","spicy","concept"],"input":"Extend the pizza vocabulary to include the MediumTopping concept as a specialized type of PizzaTopping with medium spiciness level.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] }"}
{"id":"pizza_vocabulary_023","title":"Pizza Vocabulary: Mild Topping Concept","description":"Defines the MildTopping concept as a specialized type of PizzaTopping with mild spiciness level.","tags":["vocabulary","ontology","pizza","topping","mild","spicy","concept"],"input":"Extend the pizza vocabulary to include the MildTopping concept as a specialized type of PizzaTopping with mild spiciness level.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] }"}
{"id":"pizza_vocabulary_024","title":"Pizza Vocabulary: Sausage Topping Concept","description":"Defines the SausageTopping concept as a specialized type of MeatTopping and MildTopping.","tags":["vocabulary","ontology","pizza","topping","meat","sausage","mild","concept"],"input":"Extend the pizza vocabulary to include the SausageTopping concept as a specialized type of MeatTopping and MildTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping }"}
{"id":"pizza_vocabulary_025","title":"Pizza Vocabulary: Spiced Beef Topping Concept","description":"Defines the SpicedBeefTopping concept as a specialized type of MeatTopping and HotTopping.","tags":["vocabulary","ontology","pizza","topping","meat","beef","mild","concept"],"input":"Extend the pizza vocabulary to include the SpicedBeefTopping concept as a specialized type of MeatTopping and HotTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping }"}
{"id":"pizza_vocabulary_026","title":"Pizza Vocabulary: Sauce Topping Concept","description":"Defines the SauceTopping concept as a specialized type of VegetarianTopping.","tags":["vocabulary","ontology","pizza","topping","vegetarian","sauce","concept"],"input":"Extend the pizza vocabulary to include the SauceTopping concept as a specialized type of VegetarianTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping }"}
{"id":"pizza_vocabulary_027","title":"Pizza Vocabulary: Cheese Topping Concept","description":"Defines the CheeseTopping concept as a specialized type of VegetarianTopping.","tags":["vocabulary","ontology","pizza","topping","vegetarian","cheese","concept"],"input":"Extend the pizza vocabulary to include the CheeseTopping concept as a specialized type of VegetarianTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping }"}
{"id":"pizza_vocabulary_028","title":"Pizza Vocabulary: Fruit Topping Concept","description":"Defines the FruitTopping concept as a specialized type of VegetarianTopping.","tags":["vocabulary","ontology","pizza","topping","vegetarian","fruit","concept"],"input":"Extend the pizza vocabulary to include the FruitTopping concept as a specialized type of VegetarianTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping }"}
{"id":"pizza_vocabulary_029","title":"Pizza Vocabulary: Vegetable Topping Concept","description":"Defines the VegetableTopping concept as a specialized type of VegetarianTopping.","tags":["vocabulary","ontology","pizza","topping","vegetarian","vegetable","concept"],"input":"Extend the pizza vocabulary to include the VegetableTopping concept as a specialized type of VegetarianTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"Theclass cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping }"}
{"id":"pizza_vocabulary_030","title":"Pizza Vocabulary: Tobasco Topping Concept","description":"Defines the TobascoTopping concept as a specialized type of SauceTopping and HotTopping.","tags":["vocabulary","ontology","pizza","topping","sauce","hot","tobasco","concept"],"input":"Extend the pizza vocabulary to include the TobascoTopping concept as a specialized type of SauceTopping and HotTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping }"}
{"id":"pizza_vocabulary_031","title":"Pizza Vocabulary: Parmesan Topping Concept","description":"Defines the ParmesanTopping concept as a specialized type of CheeseTopping and MildTopping.","tags":["vocabulary","ontology","pizza","topping","cheese","parmesan","mild","concept"],"input":"Extend the pizza vocabulary to include the ParmesanTopping concept as a specialized type of CheeseTopping and MildTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping }"}
{"id":"pizza_vocabulary_032","title":"Pizza Vocabulary: Mozzarella Topping Concept","description":"Defines the MozzarellaTopping concept as a specialized type of CheeseTopping and MildTopping.","tags":["vocabulary","ontology","pizza","topping","cheese","mozzarella","mild","concept"],"input":"Extend the pizza vocabulary to include the MozzarellaTopping concept as a specialized type of CheeseTopping and MildTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping }"}
{"id":"pizza_vocabulary_033","title":"Pizza Vocabulary: Sultana Topping Concept","description":"Defines the SultanaTopping concept as a specialized type of FruitTopping and MediumTopping.","tags":["vocabulary","ontology","pizza","topping","fruit","sultana","medium","concept"],"input":"Extend the pizza vocabulary to include the SultanaTopping concept as a specialized type of FruitTopping and MediumTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping // Fruit Toppings @rdfs:comment \"The class of sultana toppings\" concept SultanaTopping < FruitTopping, MediumTopping }"}
{"id":"pizza_vocabulary_034","title":"Pizza Vocabulary: Pepper Topping Concept","description":"Defines the PepperTopping concept as a specialized type of VegetableTopping.","tags":["vocabulary","ontology","pizza","topping","vegetable","pepper","concept"],"input":"Extend the pizza vocabulary to include the PepperTopping concept as a specialized type of VegetableTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping // Fruit Toppings @rdfs:comment \"The class of sultana toppings\" concept SultanaTopping < FruitTopping, MediumTopping // Vegetable Toppings @rdfs:comment \"The class of pepper toppings\" concept PepperTopping < VegetableTopping }"}
{"id":"pizza_vocabulary_035","title":"Pizza Vocabulary: Olive Topping Concept","description":"Defines the OliveTopping concept as a specialized type of VegetableTopping.","tags":["vocabulary","ontology","pizza","topping","vegetable","olive","concept"],"input":"Extend the pizza vocabulary to include the OliveTopping concept as a specialized type of VegetableTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping // Fruit Toppings @rdfs:comment \"The class of sultana toppings\" concept SultanaTopping < FruitTopping, MediumTopping // Vegetable Toppings @rdfs:comment \"The class of pepper toppings\" concept PepperTopping < VegetableTopping @rdfs:comment \"The class of olive toppings\" concept OliveTopping < VegetableTopping }"}
{"id":"pizza_vocabulary_036","title":"Pizza Vocabulary: Tomato Topping Concept","description":"Defines the TomatoTopping concept as a specialized type of VegetableTopping and MildTopping.","tags":["vocabulary","ontology","pizza","topping","vegetable","tomato","concept"],"input":"Extend the pizza vocabulary to include the TomatoTopping concept as a specialized type of VegetableTopping and MildTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping // Fruit Toppings @rdfs:comment \"The class of sultana toppings\" concept SultanaTopping < FruitTopping, MediumTopping // Vegetable Toppings @rdfs:comment \"The class of pepper toppings\" concept PepperTopping < VegetableTopping @rdfs:comment \"The class of tomato toppings\" concept TomatoTopping < VegetableTopping, MildTopping }"}
{"id":"pizza_vocabulary_037","title":"Pizza Vocabulary: SausageTopping Concept","description":"Defines the SausageTopping concept as a specialized type of MeatTopping and MildTopping.","tags":["vocabulary","ontology","pizza","topping","meat","sausage","concept"],"input":"Extend the pizza vocabulary to include the SausageTopping concept as a specialized type of MeatTopping and MildTopping.","output":"@dc:description \"A vocabulary about pizzas\" vocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza { extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs // Top Level @rdfs:comment \"The class of things that are uniquely identified by id\" aspect IdentifiedThing [ key hasId ] @rdfs:comment \"The id property of an identified thing\" scalar property hasId [ domain IdentifiedThing range xsd:string functional ] // Identified Things @rdfs:comment \"The class of food items\" concept Food < IdentifiedThing @rdfs:comment \"A relation from a food to another used as an ingredient\" relation entity HasIngredient [ from Food to Food forward hasIngredient reverse isIngredientOf transitive ] @rdfs:comment \"An enumeration of spiciness levels\" scalar Spiciness [ oneOf \"Hot\", \"Medium\", \"Mild\" ] @rdfs:comment \"The spiciness property of a food item\" scalar property hasSpiceness [ domain Food range Spiciness functional ] // Foods @rdfs:comment \"The class of pizzas\" concept Pizza < Food [ restricts some hasBase to PizzaBase ] @rdfs:comment \"The class of pizza bases\" concept PizzaBase < Food @rdfs:comment \"The class of pizza toppings\" concept PizzaTopping < Food @rdfs:comment \"A relation from a pizza to a base\" relation entity HasBase [ from Pizza to PizzaBase forward hasBase reverse isBaseOf functional inverse functional ] < HasIngredient @rdfs:comment \"A relation from a pizza to a topping\" relation entity HasTopping [ from Pizza to PizzaTopping forward hasTopping reverse isToppingOf inverse functional ] < HasIngredient // Pizzas @rdfs:comment \"The class of pizzas with some cheese toppings\" concept CheesyPizza < Pizza [ restricts some hasTopping to CheeseTopping ] @rdfs:comment \"The class of pizzas with some meat toppings\" concept MeatyPizza < Pizza [ restricts some hasTopping to MeatTopping ] @rdfs:comment \"The class of pizzas with all vegetarian toppings\" concept VegetarianPizza < Pizza [ restricts all hasTopping to VegetarianTopping ] @rdfs:comment \"The class of American pizzas\" concept American < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to SausageTopping restricts some hasTopping to TomatoTopping ] @rdfs:comment \"The class of Veneziana pizzas\" concept Veneziana < CheesyPizza, MeatyPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping restricts some hasTopping to SultanaTopping ] @rdfs:comment \"The class of Margherita pizzas\" concept Margherita < CheesyPizza, VegetarianPizza [ restricts some hasTopping to MozzarellaTopping restricts some hasTopping to TomatoTopping ] // Pizza Bases @rdfs:comment \"The class of deep pan bases\" concept DeepPanBase < PizzaBase @rdfs:comment \"The class of thin and crispy bases\" concept ThinAndCrispyBase < PizzaBase // Pizza Toppings @rdfs:comment \"The class of meat toppings\" concept MeatTopping < PizzaTopping @rdfs:comment \"The class of vegetarian toppings\" concept VegetarianTopping < PizzaTopping @rdfs:comment \"The class of hot spiciness toppings\" concept HotTopping < PizzaTopping [ restricts hasSpiceness to \"Hot\" ] @rdfs:comment \"The class of medium spiciness toppings\" concept MediumTopping < PizzaTopping [ restricts hasSpiceness to \"Medium\" ] @rdfs:comment \"The class of mild spiciness toppings\" concept MildTopping < PizzaTopping [ restricts hasSpiceness to \"Mild\" ] // Meat Topping @rdfs:comment \"The class sausage toppings\" concept SausageTopping < MeatTopping, MildTopping @rdfs:comment \"The class spiced beef toppings\" concept SpicedBeefTopping < MeatTopping, HotTopping // Vegetarian Toppings @rdfs:comment \"The class sauce toppings\" concept SauceTopping < VegetarianTopping @rdfs:comment \"The class cheese toppings\" concept CheeseTopping < VegetarianTopping @rdfs:comment \"The class fruit toppings\" concept FruitTopping < VegetarianTopping @rdfs:comment \"The class vegetable toppings\" concept VegetableTopping < VegetarianTopping // Sauce Toppings @rdfs:comment \"The class of tabasco toppings\" concept TobascoTopping < SauceTopping, HotTopping // Cheese Toppings @rdfs:comment \"The class of parmesan toppings\" concept ParmesanTopping < CheeseTopping, MildTopping @rdfs:comment \"The class of mozzarella toppings\" concept MozzarellaTopping < CheeseTopping, MildTopping // Fruit Toppings @rdfs:comment \"The class of sultana toppings\" concept SultanaTopping < FruitTopping, MediumTopping // Vegetable Toppings @rdfs:comment \"The class of pepper toppings\" concept PepperTopping < VegetableTopping @rdfs:comment \"The class of tomato toppings\" concept TomatoTopping < VegetableTopping, MildTopping }"}
{"id":"pizza_vocabulary_038","title":"Pizza Vocabulary: PepperTopping Concept","description":"Defines the JalapenoPepperTopping and SweetPepperTopping concepts as specialized type of PepperTopping, HotTopping and MildTopping.","tags":["vocabulary","jalapeno","pizza","topping","pepper","sweet","concept"],"input":"Extend the pizza vocabulary to include the JalapenoPepperTopping and SweetPepperTopping concepts as a specialized type of PepperTopping.","output":"@dc:description \"A vocabulary about pizzas\"\nvocabulary <http://example.com/tutorial1/vocabulary/pizza#> as pizza {\n    extends <http://www.w3.org/2001/XMLSchema#> as xsd\n    extends <http://purl.org/dc/elements/1.1/> as dc\n    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n    // Top Level\n    @rdfs:comment \"The class of things that are uniquely identified by id\"\n    aspect IdentifiedThing [\n        key hasId\n    ]\n    @rdfs:comment \"The id property of an identified thing\"\n    scalar property hasId [\n        domain IdentifiedThing\n        range xsd:string\n        functional\n    ]\n    // Identified Things\n    @rdfs:comment \"The class of food items\"\n    concept Food < IdentifiedThing\n    @rdfs:comment \"A relation from a food to another used as an ingredient\"\n    relation entity HasIngredient [\n        from Food to Food\n        forward hasIngredient\n        reverse isIngredientOf\n        transitive\n    ]\n    @rdfs:comment \"An enumeration of spiciness levels\"\n    scalar Spiciness [\n        oneOf \"Hot\", \"Medium\", \"Mild\"\n    ]\n    @rdfs:comment \"The spiciness property of a food item\"\n    scalar property hasSpiciness [\n        domain Food\n        range Spiciness\n        functional\n    ]\n    // Foods\n    @rdfs:comment \"The class of pizzas\"\n    concept Pizza < Food [\n        restricts some hasBase to PizzaBase\n    ]\n    @rdfs:comment \"The class of pizza bases\"\n    concept PizzaBase < Food\n    @rdfs:comment \"The class of pizza toppings\"\n    concept PizzaTopping < Food\n    @rdfs:comment \"A relation from a pizza to a base\"\n    relation entity HasBase [\n        from Pizza to PizzaBase\n        forward hasBase\n        reverse isBaseOf\n        functional\n        inverse functional\n    ]\n    < HasIngredient\n    @rdfs:comment \"A relation from a pizza to a topping\"\n    relation entity HasTopping [\n        from Pizza to PizzaTopping\n        forward hasTopping\n        reverse isToppingOf\n        inverse functional\n    ]\n    < HasIngredient\n    // Pizzas\n    @rdfs:comment \"The class of pizzas with some cheese toppings\"\n    concept CheesyPizza < Pizza [\n        restricts some hasTopping to CheeseTopping\n    ]\n    @rdfs:comment \"The class of pizzas with some meat toppings\"\n    concept MeatyPizza < Pizza [\n        restricts some hasTopping to MeatTopping\n    ]\n    @rdfs:comment \"The class of pizzas with all vegetarian toppings\"\n    concept VegetarianPizza < Pizza [\n        restricts all hasTopping to VegetarianTopping\n    ]\n    @rdfs:comment \"The class of American pizzas\"\n    concept American < CheesyPizza, MeatyPizza [\n        restricts some hasTopping to MozzarellaTopping\n        restricts some hasTopping to SausageTopping\n        restricts some hasTopping to TomatoTopping\n    ]\n    @rdfs:comment \"The class of Veneziana pizzas\"\n    concept Veneziana < CheesyPizza, MeatyPizza [\n        restricts some hasTopping to MozzarellaTopping\n        restricts some hasTopping to TomatoTopping\n        restricts some hasTopping to SultanaTopping\n    ]\n    @rdfs:comment \"The class of Margherita pizzas\"\n    concept Margherita < CheesyPizza, VegetarianPizza [\n        restricts some hasTopping to MozzarellaTopping\n        restricts some hasTopping to TomatoTopping\n    ]\n    // Pizza Bases\n    @rdfs:comment \"The class of deep pan bases\"\n    concept DeepPanBase < PizzaBase\n    @rdfs:comment \"The class of thin and crispy bases\"\n    concept ThinAndCrispyBase < PizzaBase\n    // Pizza Toppings\n    @rdfs:comment \"The class of meat toppings\"\n    concept MeatTopping < PizzaTopping\n    @rdfs:comment \"The class of vegetarian toppings\"\n    concept VegetarianTopping < PizzaTopping\n    @rdfs:comment \"The class of hot spiciness toppings\"\n    concept HotTopping < PizzaTopping [\n        restricts hasSpiciness to \"Hot\"\n    ]\n    @rdfs:comment \"The class of medium spiciness toppings\"\n    concept MediumTopping < PizzaTopping [\n        restricts hasSpiciness to \"Medium\"\n    ]\n    @rdfs:comment \"The class of mild spiciness toppings\"\n    concept MildTopping < PizzaTopping [\n        restricts hasSpiciness to \"Mild\"\n    ]\n    // Meat Topping\n    @rdfs:comment \"The class sausage toppings\"\n    concept SausageTopping < MeatTopping, MildTopping\n    @rdfs:comment \"The class spiced beef toppings\"\n    concept SpicedBeefTopping < MeatTopping, HotTopping\n    // Vegetarian Toppings\n    @rdfs:comment \"The class sauce toppings\"\n    concept SauceTopping < VegetarianTopping\n    @rdfs:comment \"The class cheese toppings\"\n    concept CheeseTopping < VegetarianTopping\n    @rdfs:comment \"The class fruit toppings\"\n    concept FruitTopping < VegetarianTopping\n    @rdfs:comment \"The class vegetable toppings\"\n    concept VegetableTopping < VegetarianTopping\n    // Sauce Toppings\n    @rdfs:comment \"The class of tabasco toppings\"\n    concept TobascoTopping < SauceTopping, HotTopping\n    // Cheese Toppings\n    @rdfs:comment \"The class of parmesan toppings\"\n    concept ParmesanTopping < CheeseTopping, MildTopping\n    @rdfs:comment \"The class of mozzarella toppings\"\n    concept MozzarellaTopping < CheeseTopping, MildTopping\n    // Fruit Toppings\n    @rdfs:comment \"The class of sultana toppings\"\n    concept SultanaTopping < FruitTopping, MediumTopping\n    // Vegetable Toppings\n    @rdfs:comment \"The class of pepper toppings\"\n    concept PepperTopping < VegetableTopping\n    @rdfs:comment \"The class of tomato toppings\"\n    concept TomatoTopping < VegetableTopping, MildTopping\n    //Pepper Toppings\n    @rdfs:comment \"The class of jalapeno pepper toppings\"\n    concept JalapenoPepperTopping < PepperTopping, HotTopping\n    @rdfs:comment \"The class of sweet pepper toppings\"\n    concept SweetPepperTopping < PepperTopping, MildTopping\n}"}
{"id": "dc_vocabulary_001", "title": "DC Vocabulary Example", "description": "The DC vocabulary is a subset maintained by the Dublin Core Metadata Initiative.", "tags": ["vocabulary", "DC", "metadata", "example"], "input": "Define a DC vocabulary as a subset of the Dublin Core Metadata Initiative.", "output": "@dc:creator \"DCMI Usage Board\" @dc:rights \"Copyright 1995-2019 DCMI.\" @dc:description \"The DC vocabulary is a subset of the vocabulary maintained by the Dublin Core Metadata Initiative.\" @dc:title \"DC\" vocabulary <http://purl.org/dc/elements/1.1/> as dc { annotation property contributor annotation property coverage annotation property creator annotation property date annotation property ^description annotation property format annotation property identifier annotation property ^language annotation property publisher annotation property ^relation annotation property rights annotation property ^source annotation property subject annotation property title annotation property type annotation property hasVersion }"}
{"id": "common_behavior_001", "title": "Common Behavior Vocabulary", "description": "A vocabulary defining behavioral aspects in the Capella framework.", "tags": ["vocabulary", "behavior", "Capella"], "input": "Define a vocabulary for behavioral concepts in Capella, extending core elements and standard schemas.", "output": "vocabulary <http://www.polarsys.org/capella/common/behavior/6.0.0#> as common.data.behavior {\\n\\textends <http://www.polarsys.org/capella/common/core/6.0.0#> as common.data.core\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\n\\t@rdfs:label \"AbstractBehavior\"\\n\\taspect AbstractBehavior < common.data.core:AbstractNamedElement\\n\\n\\t@rdfs:label \"isControlOperator\"\\n\\tscalar property AbstractBehavior_isControlOperator [\\n\\t\\tdomain AbstractBehavior\\n\\t\\trange xsd:boolean\\n\\t\\tfunctional\\n\\t]\\n\\n\\t@rdfs:label \"ownedParameterSet\"\\n\\trelation AbstractBehavior_ownedParameterSet [\\n\\t\\tfrom AbstractBehavior\\n\\t\\tto common.data.core:AbstractParameterSet\\n\\t]\\n\\n\\t@rdfs:label \"ownedParameter\"\\n\\trelation AbstractBehavior_ownedParameter [\\n\\t\\tfrom AbstractBehavior\\n\\t\\tto common.data.core:AbstractParameter\\n\\t]\\n\\n\\t@rdfs:label \"AbstractSignal\"\\n\\taspect AbstractSignal < common.data.core:AbstractType\\n\\n\\t@rdfs:label \"AbstractEvent\"\\n\\taspect AbstractEvent < common.data.core:AbstractType\\n\\n\\t@rdfs:label \"AbstractTimeEvent\"\\n\\taspect AbstractTimeEvent < AbstractEvent [\\n\\t\\trestricts AbstractTimeEvent_when to exactly 1\\n\\t]\\n\\n\\t@rdfs:label \"isRelative\"\\n\\tscalar property AbstractTimeEvent_isRelative [\\n\\t\\tdomain AbstractTimeEvent\\n\\t\\trange xsd:boolean\\n\\t\\tfunctional\\n\\t]\\n\\n\\t@rdfs:label \"when\"\\n\\trelation AbstractTimeEvent_when [\\n\\t\\tfrom AbstractTimeEvent\\n\\t\\tto TimeExpression\\n\\t\\tfunctional\\n\\t]\\n\\n\\t@rdfs:label \"AbstractMessageEvent\"\\n\\taspect AbstractMessageEvent < AbstractEvent\\n\\n\\t@rdfs:label \"AbstractSignalEvent\"\\n\\taspect AbstractSignalEvent < AbstractMessageEvent [\\n\\t\\trestricts AbstractSignalEvent_signal to exactly 1\\n\\t]\\n\\n\\t@rdfs:label \"signal\"\\n\\trelation AbstractSignalEvent_signal [\\n\\t\\tfrom AbstractSignalEvent\\n\\t\\tto AbstractSignal\\n\\t\\tfunctional\\n\\t]\\n\\n\\t@rdfs:label \"TimeExpression\"\\n\\taspect TimeExpression < common.data.core:ValueSpecification\\n\\n\\t@rdfs:label \"observations\"\\n\\trelation TimeExpression_observations [\\n\\t\\tfrom TimeExpression\\n\\t\\tto common.data.core:AbstractNamedElement\\n\\t\\tfunctional\\n\\t]\\n\\n\\t@rdfs:label \"expression\"\\n\\trelation TimeExpression_expression [\\n\\t\\tfrom TimeExpression\\n\\t\\tto common.data.core:ValueSpecification\\n\\t\\tfunctional\\n\\t]\\n}"}
{"id": "rdf_vocabulary_001", "title": "RDF Vocabulary", "description": "The RDF vocabulary as maintained by W3C, extending Dublin Core elements.", "tags": ["vocabulary", "RDF", "W3C"], "input": "Define an RDF vocabulary extending Dublin Core elements.", "output": "vocabulary <http://www.w3.org/1999/02/22-rdf-syntax-ns#> as rdf {\\n\\textends <http://purl.org/dc/elements/1.1/> as dc\\n\\n\\tannotation property about\\n\\n\\t@dc:source \"https://www.w3.org/TR/rdf-plain-literal/\"\\n\\tscalar PlainLiteral\\n\\n\\t@dc:source \"https://www.w3.org/TR/rdf11-concepts/#section-XMLLiteral\"\\n\\tscalar XMLLiteral\\n}"}
{"id": "basic_family_vocabulary_001", "title": "Basic Family Vocabulary", "description": "A vocabulary defining family relationships, including concepts for Person, Family, and relations like parents, cousins, and more.", "tags": ["vocabulary", "family", "relationships"], "input": "Define a basic family vocabulary including concepts for Person, Family, and various relationships.", "output": "vocabulary <http://example.com/vocabulary/basicfamily#> as basicfamily {\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\n\\taspect Named\\n\\n\\tscalar property name [\\n\\t\\tdomain Named\\n\\t\\trange xsd:string\\n\\t\\tfunctional\\n\\t]\\n\\n\\tconcept Family < Named\\n\\n\\tconcept Person < Named [\\n\\t\\trestricts parents to max 2\\n\\t]\\n\\n\\trelation members [\\n\\t\\tfrom Family\\n\\t\\tto Person\\n\\t]\\n\\n\\tconcept Man < Person\\n\\n\\tconcept Woman < Person\\n\\n\\trelation parents [\\n\\t\\tfrom Person\\n\\t\\tto Person\\n\\t\\treverse children\\n\\t]\\n\\n\\trelation mother [\\n\\t\\tfrom Person\\n\\t\\tto Woman\\n\\t\\tfunctional\\n\\t] < parents\\n\\n\\trelation father [\\n\\t\\tfrom Person\\n\\t\\tto Man\\n\\t\\tfunctional\\n\\t] < parents\\n\\t\\n\\trelation cousin [\\n\\t\\tfrom Person\\n\\t\\tto Person\\n\\t]\\n\\n\\trule infer_couson [\\n\\t\\tparents(x, y) &\\n\\t\\tparents(y, z) &\\n\\t\\tchildren(z, c) &\\n\\t\\tdifferentFrom(c, y) &\\n\\t\\tchildren(c, m) ->\\n\\t\\tcousin(x, m)\\n\\t]\\n}"}
{"id": "skos_vocabulary_001", "title": "SKOS Core Vocabulary", "description": "A vocabulary defining basic SKOS properties such as alternative labels and relationships.", "tags": ["vocabulary", "SKOS", "semantic"], "input": "Define a SKOS core vocabulary with annotation properties and relations.", "output": "vocabulary <http://www.w3.org/2004/02/skos/core#> as skos {\\n\\tannotation property altLabel\\n\\n\\trelation related\\n}"}
{"id": "ecore_vocabulary_001", "title": "Ecore Vocabulary", "description": "A vocabulary extending RDF and XMLSchema, defining properties for modeling Ecore elements.", "tags": ["vocabulary", "Ecore", "RDF"], "input": "Define an Ecore vocabulary extending RDF and XMLSchema with annotation and scalar properties.", "output": "vocabulary <http://www.eclipse.org/emf/2002/Ecore#> as ecore {\\n\\textends <http://www.w3.org/1999/02/22-rdf-syntax-ns#> as rdf\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\n\\tannotation property isOrdered\\n\\n\\tscalar property order [\\n\\t\\tdomain rdf:Statement\\n\\t\\trange xsd:int\\n\\t]\\n}"}
{"id": "some_domain_vocabulary_001", "title": "Some-Domain Vocabulary", "description": "A vocabulary extending RDFS, XMLSchema, and VIM4 annotations, defining properties and relationships for components and functions.", "tags": ["vocabulary", "some-domain", "annotations"], "input": "Define a vocabulary for Some-Domain extending RDFS, XMLSchema, and VIM4 annotations with scalar properties and relations.", "output": "vocabulary <http://example.org/some-domain#> as some-domain {\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://bipm.org/jcgm/vim4-annotations#> as vim4-annotations\\n\\n\\t@rdfs:label \"mass.basic\"\\n\\t@vim4-annotations:generalQuantity \"http://iso.org/iso-80000-4.1#mass\"\\n\\t@vim4-annotations:measurementUnit \"http://iso.org/iso-80000-4.1#kilogram\"\\n\\tscalar property mass.basic [ domain Component range xsd:double functional ]\\n\\n\\t@rdfs:label \"mass.allocation\"\\n\\t@vim4-annotations:generalQuantity \"http://iso.org/iso-80000-4.1#mass\"\\n\\t@vim4-annotations:measurementUnit \"http://iso.org/iso-80000-4.1#kilogram\"\\n\\tscalar property mass.allocation [ domain Component range xsd:double functional ]\\n\\n\\t@rdfs:comment \"Unique Name Assumption (UNA)\"\\n\\taspect IdentifiedElement [ key name ]\\n\\n\\t@rdfs:label \"name\"\\n\\tscalar property name [ domain IdentifiedElement range xsd:string functional ]\\n\\n\\t@rdfs:label \"Component\"\\n\\tconcept Component < IdentifiedElement\\n\\n\\tconcept Function < IdentifiedElement\\n\\n\\trelation entity Performs [ from Component to Function forward performs inverse functional ] < IdentifiedElement\\n\\n\\trelation entity IsPerformedBy [ from Function to Component forward isPerformedBy functional ]\\n}"}
{"id": "some_domain_with_metrology_vocabulary_001", "title": "Some-Domain with Metrology Vocabulary", "description": "An extension of the Some-Domain vocabulary integrating metrology concepts from VIM4.", "tags": ["vocabulary", "some-domain", "metrology", "vim4"], "input": "Extend the Some-Domain vocabulary with metrology concepts from VIM4, allowing IndividualProperty characterization of Components.", "output": "vocabulary <http://example.org/some-domain-with-metrology#> as some-domain-with-metrology {\\n\\textends <http://example.org/some-domain#> as some-domain\\n\\textends <http://bipm.org/jcgm/vim4#> as vim4\\n\\n\\t// Allows a vim4:IndividualProperty to vim4:characterize a Component.\\n\\tref concept some-domain:Component < vim4:Object, vim4:IdentifiedElement\\n\\n\\tref scalar property some-domain:name < vim4:id\\n}"}
{"id": "homesecurity_architecture_vocabulary_001", "title": "Home Security Architecture Vocabulary", "description": "A vocabulary defining the components, interfaces, and messages of a home security system architecture.", "tags": ["vocabulary", "home security", "architecture", "system"], "input": "Define a home security system architecture with components like SecuritySystem, Sensor, AlarmSystem, MonitoringSystem, and Interfaces for message handling.", "output": "vocabulary <http://example.com/homesecurity/architecture#> as hsa {\\n\\textends <http://example.com/methodology/system#> as system\\n\\n\\tconcept SecuritySystem < system:Component [\\n\\trestricts system:presents to exactly 1 I1\\n\\trestricts system:presents to exactly 1 I2\\n\\trestricts system:contains to min 1 Sensor\\n\\trestricts system:contains to exactly 1 AlarmSystem\\n\\trestricts system:contains to exactly 1 MonitoringSystem\\n]\\n\\n\\tconcept I1 < system:Interface [\\n\\trestricts all system:transfersOut to Panic\\n]\\n\\n\\tconcept I2 < system:Interface [\\n\\trestricts all system:transfersIn to Dispatch\\n]\\n\\n\\tconcept Sensor < system:Component [\\n\\trestricts system:presents to exactly 1 I3\\n]\\n\\n\\tconcept I3 < system:Interface [\\n\\trestricts all system:transfersOut to Event\\n]\\n\\n\\tconcept AlarmSystem < system:Component [\\n\\trestricts system:presents to exactly 1 I4\\n\\trestricts system:presents to exactly 1 I5\\n\\trestricts system:presents to exactly 1 I6\\n]\\n\\n\\tconcept I4 < system:Interface [\\n\\trestricts all system:transfersIn to Event\\n]\\n\\n\\tconcept I5 < system:Interface [\\n\\trestricts all system:transfersIn to Panic\\n]\\n\\n\\tconcept I6 < system:Interface [\\n\\trestricts all system:transfersOut to Alarm\\n]\\n\\n\\tconcept MonitoringSystem < system:Component [\\n\\trestricts system:presents to exactly 1 I7\\n\\trestricts system:presents to exactly 1 I8\\n]\\n\\n\\tconcept I7 < system:Interface [\\n\\trestricts all system:transfersIn to Alarm\\n]\\n\\n\\tconcept I8 < system:Interface [\\n\\trestricts all system:transfersOut to Dispatch\\n]\\n\\n\\tconcept Junction1 < system:Junction [\\n\\trestricts system:joins to exactly 1 I1\\n\\trestricts system:joins to exactly 1 I5\\n\\trestricts all system:isTraversedBy to Panic\\n]\\n\\n\\tconcept Junction2 < system:Junction [\\n\\trestricts system:joins to exactly 1 I8\\n\\trestricts system:joins to exactly 1 I2\\n\\trestricts all system:isTraversedBy to Dispatch\\n]\\n\\n\\tconcept Junction3 < system:Junction [\\n\\trestricts system:joins to exactly 1 I3\\n\\trestricts system:joins to exactly 1 I4\\n\\trestricts all system:isTraversedBy to Event\\n]\\n\\n\\tconcept Junction4 < system:Junction [\\n\\trestricts system:joins to exactly 1 I6\\n\\trestricts system:joins to exactly 1 I7\\n\\trestricts all system:isTraversedBy to Alarm\\n]\\n\\n\\tconcept Event < system:Message\\n\\tconcept Panic < system:Message\\n\\tconcept Alarm < system:Message\\n\\tconcept Dispatch < system:Message\\n}"}
{"id": "vim4.1_systems_diagram_vocabulary_001", "title": "VIM 4.1 Systems Diagram Vocabulary", "description": "A vocabulary defining the relationships and aspects of systems diagrams in the context of measurement units, systems of quantities, and related concepts.", "tags": ["vocabulary", "systems diagram", "measurement", "quantities"], "input": "Define a vocabulary for systems diagrams, referencing various concepts and relations from VIM4 and ISO 1087-1, including aspects and relations for units, quantities, and systems.", "output": "vocabulary <http://bipm.org/jcgm/vim4.1-systems-diagram#> as vim4.1-systems-diagram {\\n\\textends <http://bipm.org/jcgm/vim4#> as vim4\\n\\textends <http://iso.org/iso-1087-1#> as iso-1087-1\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:IdentifiedElement\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:GeneralProperty\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:GeneralQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:IndividualProperty\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:IndividualQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref aspect vim4:HasCoherence\\n\\n\\t@iso-1087-1:Shows\\n\\tref concept vim4:GeneralUnitaryQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref concept vim4:IndividualUnitaryQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:Instantiates\\n\\n\\t@iso-1087-1:Shows\\n\\tref concept vim4:MeasurementUnit\\n\\n\\t@iso-1087-1:Shows\\n\\tref concept vim4:SystemOfQuantities\\n\\n\\t@iso-1087-1:Shows\\n\\tref concept vim4:SystemOfUnits\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:Given\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasUnitaryQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasBaseUnitaryQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasDerivedUnitaryQuantity\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasUnit\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasBaseUnit\\n\\n\\t@iso-1087-1:Shows\\n\\tref relation entity vim4:SystemHasDerivedUnit\\n}"}
{"id": "vim4_annotations_001", "title": "Annotations for lightweight VIM4 modeling based on OML scalar properties.", "description": "A vocabulary for lightweight VIM4 modeling, extending basic vocabularies with scalar property annotations for general quantities and measurement units.", "tags": ["vocabulary", "vim4", "annotations", "OML", "scalar properties"], "input": "Define a vocabulary for lightweight VIM4 modeling with scalar property annotations for general quantities and measurement units.", "output": "@dc:creator \"Jet Propulsion Laboratory\"\\n@dc:rights \"\"\"Copyright 2021, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.\\nThis software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons.\"\"\"\\n@dc:title \"Annotations for lightweight VIM4 modeling based on OML scalar properties.\"\\nvocabulary <http://bipm.org/jcgm/vim4-annotations#> as vim4-annotations {\\n\\textends <http://purl.org/dc/elements/1.1/> as dc\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\n\\t@rdfs:label \"generalQuantity\"\\n\\t@dc:^description \"\"\"Annotation subject is a scalar property; annotation object is an ISO/IEC vim4:GeneralUnitaryQuantity instance.\"\"\"\\n\\t@rdfs:comment \"\"\"The annotated scalar property corresponds to a vim4:IndividualUnitaryQuantity that vim4:characterizes a vim4:Object corresponding to the domain of the annotated scalar property.\"\"\"\\n\\tannotation property generalQuantity\\n\\n\\t@rdfs:label \"measurementUnit\"\\n\\t@dc:^description \"\"\"Annotation subject is a scalar property; annotation object is an ISO/IEC vim4:MeasurementUnit instance.\"\"\"\\n\\tannotation property measurementUnit\\n}"}
{"id": "iso_1087_1_annotations_001", "title": "ISO 1087-1:2000 annotation vocabulary", "description": "Annotation vocabulary for traceability of terminology analysis per ISO 1087-1:2000.", "tags": ["vocabulary", "ISO 1087-1", "annotations", "terminology", "traceability"], "input": "Define an annotation vocabulary for traceability of terminology analysis per ISO 1087-1:2000.", "output": "@dc:creator \"Jet Propulsion Laboratory\"\\n@dc:rights \"Copyright 2021, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.\\nThis software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons.\"\\n@dc:description \"Annotation vocabulary for traceability of terminology analysis per ISO 1087-1:2000\"\\n@dc:title \"ISO 1087-1:2000 annotation vocabulary\"\\nvocabulary <http://iso.org/iso-1087-1#> as iso-1087-1 {\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://purl.org/dc/elements/1.1/> as dc\\n\\n\\t@rdfs:label \"object\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.1.1]\"\\n\\tannotation property Object\\n\\n\\t@rdfs:label \"property\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.4]\"\\n\\tannotation property Property\\n\\n\\t@rdfs:label \"concept\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.1]\"\\n\\tannotation property Concept\\n\\n\\t@rdfs:label \"characteristic\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.4]\"\\n\\tannotation property Characteristic\\n\\n\\t@rdfs:label \"essential characteristic\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.6]\"\\n\\tannotation property EssentialCharacteristic < Characteristic\\n\\n\\t@rdfs:label \"delimiting characteristic\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.7]\"\\n\\tannotation property DelimitingCharacteristic < Characteristic\\n\\n\\t@rdfs:label \"hierarchical relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.20]\"\\n\\tannotation property HierarchicalRelation\\n\\n\\t@rdfs:label \"generic relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.21]\"\\n\\tannotation property GenericRelation < HierarchicalRelation\\n\\n\\t@rdfs:label \"partitive relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.22]\"\\n\\tannotation property PartitiveRelation < HierarchicalRelation\\n\\n\\t@rdfs:label \"associative relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.23]\"\\n\\tannotation property AssociativeRelation\\n\\n\\t@rdfs:label \"sequential relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.24]\"\\n\\tannotation property SequentialRelation < AssociativeRelation\\n\\n\\t@rdfs:label \"temporal relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.25]\"\\n\\tannotation property TemporalRelation < SequentialRelation\\n\\n\\t@rdfs:label \"causal relation\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.26]\"\\n\\tannotation property CausalRelation < AssociativeRelation\\n\\n\\t@rdfs:label \"concept system\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.11]\"\\n\\tconcept ConceptSystem\\n\\n\\t@rdfs:label \"includes\"\\n\\t@rdfs:comment \"\"\"This annotation specifies that the annotation subject is included in the scope of a concept system (the annotation object).\\nThe annotation subject should be an instance or a specialization of ConceptSystem.\\nThe annotation target should have an annotation as Object, Property, Concept or one of the Characteristics or *Relations.\"\"\"\\n\\tannotation property Includes\\n\\n\\t@rdfs:label \"is included in\"\\n\\t@rdfs:comment \"\"\"This annotation specifies that the annotation subject is included in the scope of a concept system (the annotation object).\\nThe annotation subject should have an annotation as Object, Property, Concept or one of the Characteristics or *Relations.\\nThe annotation object should be an instance or a specialization of ConceptSystem.\"\"\"\\n\\tannotation property IsIncludedIn\\n\\n\\t@rdfs:label \"concept diagram\"\\n\\t@rdfs:isDefinedBy \"[ISO 1087-1:3.2.12]\"\\n\\t@rdfs:comment \"\"\"Annotation subject is an ontology\"\"\"\\n\\tannotation property ConceptDiagram\\n\\n\\t@rdfs:label \"shows\"\\n\\t@rdfs:comment \"\"\"Annotation subject is shown in the diagram of the annotated ontology.\"\"\"\\n\\tannotation property Shows\\n}"}
{"id": "prov_dictionary_001", "title": "PROV Dictionary Vocabulary", "description": "W3C's provenance dictionary vocabulary that extends DC, RDFS, RDF, and PROV ontologies to define dictionary structures and operations.", "tags": ["vocabulary", "provenance", "dictionary", "w3c", "prov"], "input": "Define a provenance dictionary vocabulary that extends Dublin Core, RDFS, RDF, and PROV ontologies.", "output": "vocabulary <http://www.w3.org/ns/prov-dictionary#> as prov-dictionary {\n\textends <http://purl.org/dc/elements/1.1/> as dc\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n  \textends <http://www.w3.org/1999/02/22-rdf-syntax-ns#> as rdf\n  \textends <http://www.w3.org/ns/prov#> as prov\n\n  @rdfs:label 'Dictionary'\n  @rdfs:comment \"\"\"\n  A dictionary is an entity that provides a structure to some constituents, which are themselves entities. These constituents are said to be member of the dictionary.\n  This concept allows for the provenance of the dictionary, but also of its constituents to be expressed. Such a notion of dictionary corresponds to a wide variety of concrete data structures, such as a maps or associative arrays.\n  A given dictionary forms a given structure for its members. A different structure (obtained either by insertion or removal of members) constitutes a different dictionary.\n  \"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#Dictionary\"\n  concept Dictionary < prov:Collection\n\n  @rdfs:label \"HadDictionaryMember\"\n  @rdfs:comment \"\"\"Describes the key-entity pair that was member of a prov:Dictionary. A dictionary can have multiple members.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#hadDictionaryMember\"\n  relation entity HadDictionaryMember [\n    from Dictionary\n    to KeyEntityPair\n    forward hadDictionaryMember\n  ]\n\n  @rdfs:label \"Empty Dictionary\"\n  @rdfs:comment \"An empty dictionary is a dictionary that has no members.\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#EmptyDictionary\"\n  concept EmptyDictionary < Dictionary, prov:EmptyCollection [\n    restricts hadDictionaryMember to exactly 0\n  ]\n\n  @rdfs:label \"Key-Entity Pair\"\n  @rdfs:comment \"\"\"A key-entity pair. Part of a prov:Dictionary through prov:hadDictionaryMember. The key is any RDF Literal, the value is a prov:Entity.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#KeyEntityPair\"\n  concept KeyEntityPair < [\n    restricts pairKey to exactly 1\n    restricts pairEntity to exactly 1\n  ]\n\n  @rdfs:label \"pairKey\"\n  @rdfs:comment \"The key of a prov:KeyEntityPair, which is an element of a prov:Dictionary.\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#pairKey\"\n  scalar property pairKey [\n    domain KeyEntityPair\n    range rdf:PlainLiteral\n    functional\n  ]\n\n  @rdfs:label \"PairEntity\"\n  @rdfs:comment \"The entity of a prov:KeyEntityPair, which is an element of a prov:Dictionary.\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#pairEntity\"\n  relation entity PairEntity [\n    from KeyEntityPair\n    to prov:Entity\n    @rdfs:label \"pairEntity\"\n    forward pairEntity\n    functional\n  ]\n\n  @rdfs:label \"DerivedByInsertionFrom\"\n  @rdfs:comment \"\"\"The source dictionary that was derived from the target dictionary by insertion of one or more key-entity pairs.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#derivedByInsertionFrom\"\n  relation entity DerivedByInsertionFrom [\n    from Dictionary\n    to Dictionary\n    @rdfs:label \"derivedByInsertionFrom\"\n    forward derivedByInsertionFrom\n    inverse functional\n    asymmetric\n    irreflexive\n  ] < prov:Derivation [\n    restricts insertedKeyEntityPair to min 1\n  ]\n\n  @rdfs:label \"InsertedKeyEntityPair\"\n  @rdfs:comment \"\"\"An object property to refer to the prov:KeyEntityPair inserted into a prov:Dictionary.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#insertedKeyEntityPair\"\n  relation entity InsertedKeyEntityPair [\n    from DerivedByInsertionFrom\n    to KeyEntityPair\n    @rdfs:label \"insertedKeyEntityPair\"\n    forward insertedKeyEntityPair\n  ]\n\n\n  @rdfs:label \"DerivedByRemovalFrom\"\n  @rdfs:comment \"\"\"The source dictionary that was derived from the target dictionary by removal of one or more keys.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#derivedByRemovalFrom\"\n  relation entity DerivedByRemovalFrom [\n    from Dictionary\n    to Dictionary\n    @rdfs:label \"derivedByRemovalFrom\"\n    forward derivedByRemovalFrom\n    inverse functional\n    asymmetric\n    irreflexive\n  ] < prov:Derivation [\n    restricts removedKey to min 1\n  ] \n\n  @rdfs:label \"removedKey\"\n  @rdfs:comment \"\"\"The key removed in a Removal.\"\"\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#removedKey\"\n  scalar property removedKey [\n    domain DerivedByRemovalFrom\n    range rdf:PlainLiteral\n    functional\n  ]\n\n  @rdfs:comment \"IF prov:hadDictionaryMember(d, e1, k1) THEN hadMember(d, e1)\"\n  @rdfs:label \"D1\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#dmembership-cmembership-inference\"\n  rule directory-membership-collection-membership [\n    hadDictionaryMember(d, kp) & pairEntity(kp,e) -> prov:hadMember(d, e)\n  ]\n\n  @rdfs:comment \"IF prov:hadDictionaryMember(d1, e1, k1) and prov:hadDictionaryMember(d1, e2, k1) THEN e1 = e2\"\n  @rdfs:label \"D3\"\n  @rdfs:seeAlso \"https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#key-single-entity-inference\"\n  rule key-single-entity [\n    hadDictionaryMember(d, kp1) & pairKey(kp1, k) & pairEntity(kp1, e1) & hadDictionaryMember(d, kp2) & pairKey(kp2, k) & pairEntity(kp2, e2) ->\n    sameAs(e1, e2)\n  ]\n}"}
{"id": "system_methodology_001", "title": "System Methodology Vocabulary", "description": "A vocabulary defining system components, interfaces, messages, and junctions with their relationships.", "tags": ["vocabulary", "methodology", "system", "component", "interface"], "input": "Define a system methodology vocabulary with components, interfaces, messages, and junctions.", "output": "vocabulary <http://example.com/methodology/system#> as system {\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\taspect IdentifiedElement [ \n\t\tkey hasIdentifier\n\t]\n\tconcept Component < IdentifiedElement\n\tconcept Interface < IdentifiedElement\n\tconcept Message < IdentifiedElement\n\tconcept Junction < IdentifiedElement\n\tscalar property hasIdentifier [\n\t\tdomain IdentifiedElement\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\trelation contains [\n\t\tfrom Component\n\t\tto Component\n\t\treverse isContainedIn\n\t\tinverse functional\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation presents [\n\t\tfrom Component\n\t\tto Interface\n\t\treverse isPresentedBy\n\t\tinverse functional\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation traverses [\n\t\tfrom Message\n\t\tto Junction\n\t\treverse isTraversedBy\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation joins [\n\t\tfrom Junction\n\t\tto Interface\n\t\treverse isJoinedIn\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation transfers [\n\t\tfrom Interface\n\t\tto Message\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation transfersIn [\n\t\tfrom Interface\n\t\tto Message\n\t\tasymmetric\n\t\tirreflexive\n\t] < transfers\n\trelation transfersOut [\n\t\tfrom Interface\n\t\tto Message\n\t\tasymmetric\n\t\tirreflexive\n\t] < transfers\n}"}
{"id": "rover_vocabulary_extension_001", "title": "Rover Vocabulary Extension", "description": "An extension vocabulary for rover missions that extends Dublin Core, RDFS, and mission foundations to define alternative and compulsory function invocations.", "tags": ["vocabulary", "rover", "mission", "extension", "function"], "input": "Define a rover vocabulary extension that extends Dublin Core, RDFS, and mission foundations with alternative and compulsory function invocations.", "output": "vocabulary <http://example.com/rover/vocabulary/extension#> as ext {\n\t\n\textends <http://purl.org/dc/elements/1.1/> as dc\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\textends <http://imce.jpl.nasa.gov/foundation/mission#> as mission\n\t\n\t\n// In order to show Redundancy in the model\n\t@rdfs:label \"InvokesAlternative\"\n\t@dc:description \"A [=Function=] must have [=invokesAlternative=] relation to zero or at least two [=Function=]s. \n\tIf there are several [=invokesAlternative=] at least one of the target functions shall be performed for the source function to be fulfilled.\" \n\t// If there is an invokesAlternative there should be more than one function with this relation.\n\t\n\trelation entity InvokesAlternative [\n\t\tfrom mission:Function\n\t\tto mission:Function\n\t\t@rdfs:label \"invokesAlt\"\n\t\tforward invokesAlt\n\t\t@rdfs:label \"is invokedAlt by\"\n\t\treverse isInvokedAltBy\n\t] < mission:Invokes\n\t\n\t@rdfs:label \"InvokesCompulsory\"\n\t@dc:description \"A [=Function=] must have [=invokesCompulsory=] relation to zero or more [=Function=]s. \n\tIt implies that all target functions are needed to fulfill the source function.\"\n\trelation entity InvokesComp [\n\t\tfrom mission:Function\n\t\tto mission:Function\n\t\t@rdfs:label \"invokesComp\"\n\t\tforward invokesComp\n\t\t@rdfs:label \"is invokedComp by\"\n\t\treverse isInvokedCompBy\n\t] < mission:Invokes\n}"}
{"id": "base_vocabulary_001", "title": "Base Vocabulary", "description": "A base vocabulary extending RDFS and XMLSchema that defines identified things, aggregation, and containment relationships.", "tags": ["vocabulary", "base", "identified", "aggregation", "containment"], "input": "Define a base vocabulary extending RDFS and XMLSchema with identified things, aggregation, and containment concepts.", "output": "vocabulary <http://example.com/tutorial2/vocabulary/base#> as base {\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\t@rdfs:comment \"The class of things having an id and a canonical name\"\n\taspect IdentifiedThing [\n\t\tkey hasIdentifier\n\t]\n\t@rdfs:comment \"The has canonical name property\"\n\tscalar property hasCanonicalName [\n\t\tdomain IdentifiedThing\n\t\trange xsd:string\n\t]\n\t@rdfs:comment \"The has identifier property\"\n\tscalar property hasIdentifier [\n\t\tdomain IdentifiedThing\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\t@rdfs:comment \"The has description property\"\n\tscalar property hasDescription [\n\t\tdomain IdentifiedThing\n\t\trange xsd:string\n\t]\n \t@rdfs:comment \"The class of things that can be aggregated\"\n\taspect AggregatedThing\n\t@rdfs:comment \"The aggregates relation between aggregated things\"\n\trelation entity Aggregates [\n\t\tfrom AggregatedThing\n\t\tto AggregatedThing\n\t\tforward aggregates\n\t\treverse isAggregatedIn\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\t@rdfs:comment \"A ContainedElement is a thing that can participate in homeomeric containment relationships.\"\n\taspect ContainedElement\n\t@rdfs:comment \"Contains is a many-to-many relation used to represent homeomeric relations that form directed rooted trees.\"\n\trelation entity Contains [\n\t\tfrom ContainedElement\n    \tto ContainedElement\n\t\tforward contains\n\t\treverse isContainedIn\n\t\tinverse functional\n\t\tasymmetric\n\t\tirreflexive\n\t]\n}"}
{"id": "mechanical_vocabulary_001", "title": "Mechanical Vocabulary", "description": "A mechanical vocabulary extending RDFS, mission, and VIM4 ontologies to define mechanical components and mass magnitudes.", "tags": ["vocabulary", "mechanical", "component", "mass", "quantity"], "input": "Define a mechanical vocabulary extending RDFS, mission vocabulary, and VIM4 with mechanical components and mass magnitudes.", "output": "vocabulary <http://example.com/tutorial2/vocabulary/mechanical#> as mechanical {\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\textends <http://example.com/tutorial2/vocabulary/mission#> as mission\n\textends <http://bipm.org/jcgm/vim4#> as vim4\n\tuses <http://iso.org/iso-80000-4.1#> as iso-80000-4.1\n\t@rdfs:comment \"The class of mechanical components as physical objects\"\n\tconcept MechanicalComponent < mission:Component, vim4:Object\n\t@rdfs:comment \"The class of magnitudes in kilograms for mass quantities on mechanical components\"\n\tconcept MassMagnitude < vim4:InherentUnitaryQuantityValue [\n\t\trestricts all vim4:characterizes to MechanicalComponent\n    \trestricts vim4:instantiates to iso-80000-4.1:mass\n    \trestricts vim4:unit to iso-80000-4.1:kilogram\n\t]\n}"}
{"id": "mission_vocabulary_001", "title": "Mission Vocabulary", "description": "A mission vocabulary extending RDFS and base vocabularies to define missions, objectives, components, interfaces, requirements, and their relationships.", "tags": ["vocabulary", "mission", "objective", "component", "interface", "requirement"], "input": "Define a mission vocabulary extending RDFS and base vocabularies with missions, objectives, components, interfaces, and requirements.", "output": "vocabulary <http://example.com/tutorial2/vocabulary/mission#> as mission {\n\t\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\textends <http://example.com/tutorial2/vocabulary/base#> as base\n\t@rdfs:comment \"An Objective=] represents a specific interest \n\tthat one or more stakeholders have in the successful execution of a mission.\"\n\tconcept Objective < base:IdentifiedThing, base:AggregatedThing [\n\t\trestricts all base:aggregates to Objective\n\t\trestricts all base:isAggregatedIn to Objective\n\t]\n\t@rdfs:comment \"A Mission pursues Objectives.\"\n\tconcept Mission < base:IdentifiedThing\n\t@rdfs:comment \"A Mission pursues zero or more Objectives.\"\n\trelation entity Pursues [\n\t\tfrom Mission\n\t\tto Objective\n\t\tforward pursues\n\t\treverse isPursuedBy\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\t@rdfs:comment \"A Component is something that can be deployed in a mission.\"\n\tconcept Component < base:IdentifiedThing\n\t@rdfs:comment \"A Mission deploys zero or more Components.\"\n\trelation entity Deploys [\n\t\tfrom Mission\n\t\tto Component\n\t\tforward deploys\n\t\treverse isDeployedBy\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\t@rdfs:comment \"A Component can be organized hierarchically by containing other Components. \"\n\tref concept Component < base:ContainedElement [\n\t\trestricts all base:contains to Component\n\t\trestricts all base:isContainedIn to Component\n\t]\n\t@rdfs:comment \"An Interface represents a set of features that describe some Component's interaction with another Component.\"\n\tconcept Interface < base:IdentifiedThing\n\t@rdfs:comment \"A Component presents zero or more Interfaces.\"\n\trelation entity Presents [\n\t\tfrom Component\n\t\tto Interface\n\t\tforward presents\n\t\treverse isPresentedBy\n\t\tinverse functional\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\t@rdfs:comment \"SpecifiedThing is something that isSpecifiedBy a Requirement\"\n\taspect SpecifiedThing\n\t@rdfs:comment \"Presents is a relation that can be specified by a requirement.\"\n\tref relation entity Presents < SpecifiedThing\n\t@rdfs:comment \"A Requirement specifies that something must be true about something.\"\n\tconcept Requirement < base:IdentifiedThing\n\t@rdfs:comment \"A Requirement specifies zero or more SpecifiedThings.\"\n\trelation entity Specifies [\n\t\tfrom Requirement\n\t\tto SpecifiedThing\n\t\tforward specifies\n\t\treverse isSpecifiedBy\n\t\tfunctional\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\t@rdfs:comment \"A Junction joins two or more Interfaces.\"\n\trelation entity Junction [\n\t\tfrom Interface\n\t\tto Interface\n\t\tforward joins\n\t\tsymmetric\n\t\tirreflexive\n\t] < base:IdentifiedThing \n\t@rdfs:comment \"A Component connects to zero or more components.\"\n\trelation entity Connection [\n\t\tfrom Component\n\t\tto Component\n\t\tforward connectsTo\n\t\tsymmetric\n\t]\n\t@rdfs:comment \"When interfaces presented by components are joined, we infer that the components are connected.\"\n\trule Junction-infers-Connection [\n\t\tpresents(c1, i1) & joins(i1, i2) & isPresentedBy(i2, c2) -> connectsTo(c1, c2)\n\t]\n}"}
{"id": "diagram1_vocabulary_001", "title": "S* Diagram1 Vocabulary", "description": "A vocabulary for S* diagrams that extends the interface vocabulary and references Interface and System concepts.", "tags": ["vocabulary", "s-star", "diagram", "interface", "system"], "input": "Define a diagram vocabulary for S* that extends the interface vocabulary and references Interface and System concepts.", "output": "vocabulary <http://incose.org/pwg/s-star/vocabulary/diagrams/diagram1#> as diagram1 {\n    extends <http://incose.org/pwg/s-star/vocabulary/interface#> as interface\n    ref concept interface:Interface\n//    ref concept power-interface:ElectricalPowerInterface\n    ref concept interface:System\n}"}
{"id": "firesat_fse_vocabulary_001", "title": "Flight System Engineering Vocabulary", "description": "A vocabulary for flight system engineering that extends DC, XMLSchema, base, mission, project, and VIM4 ontologies to define mass constraints, subsystems, assemblies, interfaces, and functions.", "tags": ["vocabulary", "firesat", "flight", "engineering", "subsystem", "mass"], "input": "Define a flight system engineering vocabulary extending DC, XMLSchema, base, mission, project, and VIM4 with mass constraints, subsystems, assemblies, interfaces, and functions.", "output": "@dc:title \"Flight System Engineering\"\nvocabulary <http://opencaesar.io/firesat/vocabularies/fse#> as fse {\n\textends <http://purl.org/dc/elements/1.1/> as dc\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\textends <http://imce.jpl.nasa.gov/foundation/base#> as base\n\textends <http://imce.jpl.nasa.gov/foundation/mission#> as mission\n\textends <http://imce.jpl.nasa.gov/foundation/project#> as project\n\textends <http://bipm.org/jcgm/vim4#> as vim4\n\tuses <http://iso.org/iso-80000-4.1#> as iso-80000-4.1\n\t// Quantities\n\taspect MassConstrainedElement < vim4:Object\n\tconcept MassConstraint < vim4:InherentUnitaryQuantityValue [\n\t\trestricts all vim4:characterizes to MassConstrainedElement\n    \trestricts vim4:instantiates to iso-80000-4.1:mass\n    \trestricts vim4:unit to iso-80000-4.1:kilogram\n\t]\n\tconcept MassAllocationConstraint < MassConstraint\n\tconcept MassLimitConstraint < MassConstraint\n\t// Workpackages\n\tref concept project:WorkPackage < MassConstrainedElement\n\t// Components\n\tconcept Subsystem < mission:Component, MassConstrainedElement [\n\t\trestricts all base:aggregates to Assembly\n\t]\n\t\n\tconcept Assembly < mission:Component, MassConstrainedElement [\n\t\trestricts all base:isAggregatedIn to Subsystem\n\t]\n\t// Interfaces\n\tconcept EndCircuit < mission:Interface [\n\t\trestricts all mission:isJoinedIn to PowerFunction\n\t\trestricts all mission:isPresentedBy to Assembly\n\t]\n\tconcept PowerEndCircuit < EndCircuit\n\tconcept PowerIn < PowerEndCircuit\n\tconcept PowerOut < PowerEndCircuit\n\t// Junctions\n\tconcept Function < mission:Junction [\n\t\trestricts all mission:joins to EndCircuit\n\t]\n\tscalar property hasFunctionType [\n\t\tdomain Function\n\t\trange xsd:string\n\t]\n\t\n\tconcept PowerFunction < Function [\n\t\trestricts hasFunctionType to \"Power\"\n\t\trestricts all mission:joins to PowerEndCircuit\n\t\t\n\t]\n\trelation entity ConnectsAssembly [\n\t\tfrom Function\n\t\tto Assembly\n\t\tforward connectsAssembly\n\t\tasymmetric\n\t\tirreflexive\n\t]\n\trelation entity ConnectsAssembly1 [\n\t\tfrom Function\n\t\tto Assembly\n\t\tforward connectsAssembly1\n\t\tasymmetric\n\t\tirreflexive\n\t] < ConnectsAssembly\n\trelation entity ConnectsAssembly2 [\n\t\tfrom Function\n\t\tto Assembly\n\t\tforward connectsAssembly2\n\t\tasymmetric\n\t\tirreflexive\n\t] < ConnectsAssembly \n\tscalar EndCircuitDirection [\n\t\toneOf \"in\"^^xsd:string,\n\t\t\t\"inout\"^^xsd:string,\n\t\t\t\"out\"^^xsd:string\n\t]\n\tscalar property hasFunctionDirection [\n\t\tdomain Function\n\t\trange FunctionDirection\n\t]\n\tscalar FunctionDirection [\n\t\toneOf \"1to2\"^^xsd:string,\n\t\t\t\"2to1\"^^xsd:string,\n\t\t\t\"Bidirectional\"^^xsd:string,\n\t\t\t\"Undefined\"^^xsd:string\n\t]\n\t\n\tscalar property hasEndCircuitDirectione [\n\t\tdomain Function\n\t\trange EndCircuitDirection\n\t]\n}"}
{"id": "obsidian_vocabulary_001", "title": "Obsidian Vocabulary", "description": "A vocabulary extending RDFS with an icon annotation property.", "tags": ["vocabulary", "obsidian", "icon"], "input": "Define an Obsidian vocabulary with an icon annotation property.", "output": "vocabulary <http://opencaesar.io/obsidian#> as obsidian {\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\t@rdfs:seeAlso \"https://lucide.dev\"\n\tannotation property hasIcon\n}"}
{"id": "sierra_base_vocabulary_001", "title": "Sierra Base Vocabulary", "description": "A base vocabulary defining core aspects, relations, and properties for modeling.", "tags": ["vocabulary", "sierra", "base", "modeling"], "input": "Define a Sierra base vocabulary with aspects, relations, and properties for modeling.", "output": "vocabulary <http://opencaesar.io/sierra/base#> as base {\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\t// Aspects\n\taspect IdentifiableElement [\n\t\tkey hasId\n\t]\n\taspect ContainableElement\n\taspect AggregatableElement\n\taspect SpecializableElement\n\taspect RefinableElement\n\t// Relations\n\trelation contains [\n\t\tfrom ContainableElement\n\t\tto ContainableElement\n\t\treverse isContainedBy\n\t\tirreflexive\n\t\tasymmetric\n\t\tinverse functional\n\t]\n\trelation aggregates [\n\t\tfrom AggregatableElement\n\t\tto AggregatableElement\n\t\treverse isAggregatedBy\n\t\tirreflexive\n\t\tasymmetric\n\t]\n\trelation specializes [\n\t\tfrom SpecializableElement\n\t\tto SpecializableElement\n\t\treverse isSpecializedBy\n\t\ttransitive\n\t]\n\trelation refines [\n\t\tfrom RefinableElement\n\t\tto RefinableElement\n\t\treverse isRefinedBy\n\t\tirreflexive\n\t\tasymmetric\n\t]\n\t// Properties\n\tscalar property hasId [\n\t\tdomain IdentifiableElement\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\tscalar property hasDescription [\n\t\trange xsd:string\n\t\tfunctional\n\t]\n}"}
{"id": "sierra_component_vocabulary_001", "title": "Sierra Component Vocabulary", "description": "A vocabulary defining component modeling concepts extending base, operation, requirement, and function vocabularies.", "tags": ["vocabulary", "sierra", "component", "system", "interface"], "input": "Define a Sierra component vocabulary with concepts for components, systems, interfaces, and their relationships.", "output": "vocabulary <http://opencaesar.io/sierra/component#> as component {\n\textends <http://www.w3.org/2002/07/owl#> as owl\n\textends <http://opencaesar.io/sierra/base#> as base\n\textends <http://opencaesar.io/sierra/operation#> as operation\n\textends <http://opencaesar.io/sierra/requirement#> as requirement\n\textends <http://opencaesar.io/sierra/function#> as function\n\t// Aspects\n\taspect PresentingElement\n\t// Concepts\n\tconcept Component < base:ContainableElement, base:SpecializableElement, requirement:SatisfyingElement, function:PerformingElement, PresentingElement [\n\t\trestricts all base:contains to Component\n\t\trestricts all base:isContainedBy to Component\n\t\trestricts all base:specializes to Component\n\t\trestricts all base:isSpecializedBy to Component\n\t]\n\tconcept System < Component [\n\t\trestricts all base:isContainedBy to System\n\t\trestricts all base:specializes to System\n\t\trestricts all base:isSpecializedBy to System\n\t]\n\tconcept Interface\n\tconcept Path < base:AggregatableElement [\n\t\trestricts all base:aggregates to Connector\n\t\trestricts all base:isAggregatedBy to owl:Nothing\n\t]\n\t// Relations\n\trelation entity Connector [\n\t\tfrom Interface\n\t\tto Interface\n\t\tforward sendsTo\n\t\treverse receivesFrom\n\t] < base:AggregatableElement [\n\t\trestricts all base:aggregates to owl:Nothing\n\t\trestricts all base:isAggregatedBy to Path\n\t]\n\trelation presents [\n\t\tfrom PresentingElement\n\t\tto Interface\n\t\treverse isPresentedBy\n\t\tinverse functional\n\t]\n\trelation supports [\n\t\tfrom System\n\t\tto operation:Capability\n\t\treverse isSupportedBy\n\t\tinverse functional\n\t]\n}"}
{"id": "sierra_datatype_vocabulary_001", "title": "Sierra Datatype Vocabulary", "description": "A vocabulary defining data type concepts, properties and relationships for modeling primitive and composite types.", "tags": ["vocabulary", "sierra", "datatype", "primitive", "composite"], "input": "Define a Sierra datatype vocabulary with concepts for primitive and composite types, fields, and their properties.", "output": "vocabulary <http://opencaesar.io/sierra/datatype#> as datatype {\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\textends <http://www.w3.org/2002/07/owl#> as owl\n\t// Concepts\n\tconcept DataType\n\tconcept PrimitiveType < DataType\n\tconcept CompositeType < DataType\n\tconcept Field\n\t// Properties\n\tscalar property hasScalar [\n\t\tdomain PrimitiveType\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\tscalar property hasQuantity [\n\t\tdomain PrimitiveType\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\tscalar property hasUnit [\n\t\tdomain PrimitiveType\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\tscalar property hasDisplayUnit [\n\t\tdomain PrimitiveType\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\tscalar property hasMinimum [\n\t\tdomain PrimitiveType\n\t\trange owl:real\n\t\tfunctional\n\t]\n\tscalar property hasMaximum [\n\t\tdomain PrimitiveType\n\t\trange owl:real\n\t\tfunctional\n\t]\n\tscalar property hasPattern [\n\t\tdomain PrimitiveType\n\t\trange xsd:string\n\t\tfunctional\n\t]\n\t// Relations\n\trelation hasField [\n\t\tfrom CompositeType\n\t\tto Field\n\t\treverse isPropertyOf\n\t\tinverse functional\n\t]\n\trelation hasType [\n\t\tfrom Field\n\t\tto DataType\n\t\treverse isTypedBy\n\t\tfunctional\n\t]\n}"}
{"id": "sierra_function_vocabulary_001", "title": "Sierra Function Vocabulary", "description": "A vocabulary defining functional concepts and relationships for modeling functions, pins, and exchanges.", "tags": ["vocabulary", "sierra", "function", "pin", "exchange"], "input": "Define a Sierra function vocabulary with concepts for functions, pins, and their exchanges.", "output": "vocabulary <http://opencaesar.io/sierra/function#> as function {\n\textends <http://www.w3.org/2002/07/owl#> as owl\n\textends <http://opencaesar.io/sierra/base#> as base\n\textends <http://opencaesar.io/sierra/datatype#> as datatype\n\textends <http://opencaesar.io/sierra/operation#> as operation\n\textends <http://opencaesar.io/sierra/requirement#> as requirement\n\t// Aspects\n\taspect PerformingElement\n\taspect ExchangingElement\n\t// Concepts\n\tconcept Function < requirement:SatisfyingElement, ExchangingElement\n\tconcept Pin < ExchangingElement\n\tconcept InputPin < Pin\n\tconcept OutputPin < Pin\n\t// Relations\n\trelation entity Exchange [\n\t\tfrom ExchangingElement\n\t\tto ExchangingElement\n\t\tforward sendsTo\n\t\treverse receivesFrom\n\t]\n\trelation transmits [\n\t\tfrom Exchange\n\t\tto datatype:DataType\n\t\treverse isTransmittedBy\n\t\tfunctional\n\t]\n\trelation implements [\n\t\tfrom Exchange\n\t\tto operation:Capability\n\t\treverse isImplementedBy\n\t]\n\trelation performs [\n\t\tfrom PerformingElement\n\t\tto Function\n\t\treverse isPerformedBy\n\t\tinverse functional\n\t]\n\trelation hasPin [\n\t\tfrom Function\n\t\tto Pin\n\t\treverse isPinOf\n\t\tinverse functional\n\t]\n\trelation hasInput [\n\t\tfrom Function\n\t\tto InputPin\n\t\treverse isInputOf\n\t] < hasPin\n\trelation hasOutput [\n\t\tfrom Function\n\t\tto OutputPin\n\t\treverse isOutputOf\n\t] < hasPin\n}"}
{"id": "sierra_obsidian_annotations_vocabulary_001", "title": "Sierra Obsidian Annotations Vocabulary", "description": "A vocabulary defining icon annotations for various Sierra concepts using the Obsidian vocabulary.", "tags": ["vocabulary", "sierra", "obsidian", "annotations", "icons"], "input": "Define a Sierra obsidian annotations vocabulary that assigns icons to various component, operation, function, and datatype concepts.", "output": "vocabulary <http://opencaesar.io/sierra/obsidian/annotations#> as annotations {\n\textends <http://opencaesar.io/obsidian#> as obsidian\n\textends <http://opencaesar.io/sierra/component#> as component\n\textends <http://opencaesar.io/sierra/operation#> as operation\n\textends <http://opencaesar.io/sierra/function#> as function\n\textends <http://opencaesar.io/sierra/datatype#> as datatype\n\t@obsidian:hasIcon \"rocket\"\n\tref concept component:System\n\t@obsidian:hasIcon \"user\"\n\tref concept operation:Actor\n\t@obsidian:hasIcon \"orbit\"\n\tref concept operation:Entity\n\t@obsidian:hasIcon \"check\"\n\tref concept operation:Capability\n\t@obsidian:hasIcon \"square-function\"\n\tref concept function:Function\n\t@obsidian:hasIcon \"move-up-right\"\n\tref relation entity function:Exchange\n\t@obsidian:hasIcon \"send\"\n\tref concept datatype:PrimitiveType\n\t@obsidian:hasIcon \"send\"\n\tref concept datatype:CompositeType\n}"}
{"id": "sierra_operation_vocabulary_001", "title": "Sierra Operation Vocabulary", "description": "A vocabulary defining operational concepts and relationships for modeling missions, objectives, actors, entities, and capabilities.", "tags": ["vocabulary", "sierra", "operation", "mission", "capability"], "input": "Define a Sierra operation vocabulary with concepts for missions, objectives, actors, entities, and capabilities.", "output": "vocabulary <http://opencaesar.io/sierra/operation#> as operation {\n\textends <http://opencaesar.io/sierra/base#> as base\n\textends <http://opencaesar.io/sierra/function#> as function\n\textends <http://opencaesar.io/sierra/component#> as component\n\t// Aspects\n\taspect OperationalElement\n\t// Concepts\n\tconcept Mission\n\tconcept Objective < base:ContainableElement [\n\t\trestricts all base:contains to Objective\n\t\trestricts all base:isContainedBy to Objective\n\t]\n\tconcept Actor < base:SpecializableElement, function:PerformingElement, component:PresentingElement, OperationalElement [\n\t\trestricts all base:specializes to Actor\n\t\trestricts all base:isSpecializedBy to Actor\n\t]\n\tconcept Entity < base:SpecializableElement, function:PerformingElement, component:PresentingElement, OperationalElement [\n\t\trestricts all base:specializes to Entity\n\t\trestricts all base:isSpecializedBy to Entity\n\t]\n\tconcept Capability < base:SpecializableElement, base:ContainableElement [\n\t\trestricts all base:specializes to Capability\n\t\trestricts all base:isSpecializedBy to Capability\n\t\trestricts all base:contains to Capability\n\t\trestricts all base:isContainedBy to Capability\n\t]\n\t// Relation\n\trelation pursues [\n\t\tfrom Mission\n\t\tto Objective\n\t\treverse isPursuedBy\n\t\tinverse functional\n\t]\n\trelation realizes [\n\t\tfrom Capability\n\t\tto Objective\n\t\treverse isRealizedBy\n\t\tinverse functional\n\t]\n\trelation involves [\n\t\tfrom Capability\n\t\tto OperationalElement\n\t\treverse inInvolvedIn\n\t]\n}"}
{"id": "sierra_requirement_vocabulary_001", "title": "Sierra Requirement Vocabulary", "description": "A vocabulary defining requirement concepts and relationships for modeling requirements, constraints, and verification.", "tags": ["vocabulary", "sierra", "requirement", "constraint", "verification"], "input": "Define a Sierra requirement vocabulary with concepts for requirements, constraints, and their relationships.", "output": "vocabulary <http://opencaesar.io/sierra/requirement#> as requirement {\n\textends <http://www.w3.org/2001/XMLSchema#> as xsd\n\textends <http://opencaesar.io/sierra/base#> as base\n\t// Aspects\n\taspect SatisfyingElement\n\taspect VerifyingElement\n\t// Concepts\n\tconcept Requirement < base:IdentifiableElement, base:ContainableElement, base:RefinableElement [\n\t\trestricts all base:contains to Requirement\n\t\trestricts all base:isContainedBy to Requirement\n\t\trestricts all base:refines to Requirement\n\t\trestricts all base:isRefinedBy to Requirement\n\t]\n\tconcept Constraint\n\t// Relations\n\trelation satisfies [\n\t\tfrom SatisfyingElement\n\t\tto Requirement\n\t\treverse isSatisfiedBy\n\t]\n\trelation verifies [\n\t\tfrom VerifyingElement\n\t\tto Requirement\n\t\treverse isVerifieddBy\n\t\tinverse functional\n\t]\n\trelation hasConstraint [\n\t\tfrom Requirement\n\t\tto Constraint\n\t\tinverse functional\n\t]\n\t// Properties\n\tscalar property hasStatement [\n\t\tdomain Requirement\n\t\trange xsd:string\n\t]\n\tscalar property hasRationale [\n\t\tdomain Requirement\n\t\trange xsd:string\n\t]\n\tscalar property hasExpression [\n\t\tdomain Constraint\n\t\trange xsd:string\n\t]\n\tscalar property isExpressedIn [\n\t\tdomain Constraint\n\t\trange xsd:string\n\t]\n}"}
{"id": "sierra_scenario_vocabulary_001", "title": "Sierra Scenario Vocabulary", "description": "A vocabulary defining scenario concepts and relationships for modeling scenarios that derive requirements and demonstrate capabilities.", "tags": ["vocabulary", "sierra", "scenario", "instance", "derivation"], "input": "Define a Sierra scenario vocabulary with concepts for scenarios that derive requirements and demonstrate capabilities.", "output": "vocabulary <http://opencaesar.io/sierra/scenario#> as scenario {\n\textends <http://opencaesar.io/sierra/requirement#> as requirement\n\textends <http://opencaesar.io/sierra/operation#> as operation\n\textends <http://opencaesar.io/sierra/function#> as function\n\t// Aspects\n\taspect DerivingElement\n\t// Concepts\n\tconcept Scenario < DerivingElement [\n\t\trestricts all derives to requirement:Requirement\n\t\trestricts all isDrivenBy to requirement:Requirement\n\t]\n\tref concept requirement:Requirement < DerivingElement [\n\t\trestricts all derives to Scenario\n\t\trestricts all isDrivenBy to Scenario\n\t]\n\tconcept Instance\n\t// Relation\n\trelation derives [\n\t\tfrom DerivingElement\n\t\tto DerivingElement\n\t\treverse isDrivenBy\n\t]\n\trelation demonstrates [\n\t\tfrom Scenario\n\t\tto operation:Capability\n\t\tfunctional\n\t]\n\trelation represents [\n\t\tfrom Instance\n\t\tto  function:PerformingElement\n\t]\n}"}
{"id": "example_vocabulary_001", "title": "Example Vocabulary", "description": "A simple example vocabulary demonstrating aspects, concepts, and relation entities.", "tags": ["vocabulary", "example", "template"], "input": "Define an example vocabulary with Dublin Core annotations, an aspect, a concept, and a relation entity.", "output": "@dc:title \"Example Vocabulary\"\n@dc:creator \"Example Company\"\n@dc:rights \"Copyright 2019, by Example Company\"\nvocabulary <http://opencaesar.io/template/vocabulary/vocabulary1#> as vocabulary1 {\n\textends <http://purl.org/dc/elements/1.1/> as dc\n\t\n\t// Example aspect\n\taspect A\n\t// Example concept\n\tconcept C < A\n\t// Example relation entity\n\trelation entity R [\n\t\tfrom C\n\t\tto A\n\t\tforward r\n\t]\n}"}
{"id": "dublin_core_vocabulary_001", "title": "Dublin Core Elements Vocabulary", "description": "The Dublin Core Elements vocabulary maintained by the DCMI Usage Board, defining standard metadata annotation properties.", "tags": ["vocabulary", "dublin_core", "metadata", "annotation"], "input": "Define the Dublin Core Elements vocabulary with its standard annotation properties.", "output": "@dc:creator \"DCMI Usage Board\"\n@dc:rights \"Copyright 1995-2019 DCMI.\"\n@dc:description \"The DC vocabulary is a subset of the vocabulary maintained by the Dublin Core Metadata Initiative.\"\n@dc:title \"DC\"\nvocabulary <http://purl.org/dc/elements/1.1/> as dc {\n\tannotation property contributor\n\tannotation property coverage\n\tannotation property creator\n\tannotation property date\n\tannotation property ^description\n\tannotation property format\n\tannotation property identifier\n\tannotation property ^language\n\tannotation property publisher\n\tannotation property ^relation\n\tannotation property rights\n\tannotation property ^source\n\tannotation property subject\n\tannotation property title\n\tannotation property type\n\tannotation property hasVersion\n}"}
{"id": "rdf_vocabulary_002", "title": "RDF Vocabulary", "description": "The RDF vocabulary maintained by W3C, defining core RDF concepts like Statement, subject, predicate, and object.", "tags": ["vocabulary", "rdf", "w3c", "semantic_web"], "input": "Define the RDF vocabulary with its core concepts and relations.", "output": "@dc:creator \"W3C\"\n@dc:rights \"Copyright 1999 W3C.\"\n@dc:source \"https://www.w3.org/TR/owl2-syntax/#ref-xml-schema-datatypes\"\n@dc:description \"The RDF vocabulary is a subset of the vocabulary maintained by the W3C.\"\n@dc:title \"RDF\"\nvocabulary <http://www.w3.org/1999/02/22-rdf-syntax-ns#> as rdf {\n\textends <http://purl.org/dc/elements/1.1/> as dc\n\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\n\tannotation property about\n\t@dc:source \"https://www.w3.org/TR/rdf-plain-literal/\"\n\tscalar PlainLiteral\n\t@dc:source \"https://www.w3.org/TR/rdf11-concepts/#section-XMLLiteral\"\n\tscalar XMLLiteral\n\t@dc:source \"https://www.w3.org/TR/rdf-schema/#ch_statement\"\n\tconcept Statement\n\t@dc:source \"https://www.w3.org/TR/rdf-schema/#ch_subject\"\n\trelation subject [\n\t\tfrom Statement\n\t\tto rdfs:Resource\n\t]\n\t@dc:source \"https://www.w3.org/TR/rdf-schema/#ch_predicate\"\n\trelation predicate [\n\t\tfrom Statement\n\t\tto rdfs:Resource\n\t]\n\t@dc:source \"https://www.w3.org/TR/rdf-schema/#ch_object\"\n\trelation object [\n\t\tfrom Statement\n\t\tto rdfs:Resource\n\t]\n}"}
{"id": "base_vocabulary_002", "title": "Base Vocabulary Example", "description": "A base vocabulary extending RDFS and XMLSchema.", "tags": ["vocabulary", "base", "example"], "input": "Define a base vocabulary extending RDFS and XMLSchema.", "output": "vocabulary <http://example.com/tutorial2/vocabulary/base#> as base {\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n}"}
{"id": "mission_vocabulary_002", "title": "Mission Vocabulary Example", "description": "A mission vocabulary extending the base vocabulary.", "tags": ["vocabulary", "mission", "example"], "input": "Define a mission vocabulary that extends the base vocabulary.", "output": "vocabulary <http://example.com/tutorial2/vocabulary/mission#> as mission {\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://example.com/tutorial2/vocabulary/base#> as base\\n}"}
{"id": "security_system_architecture_001", "title": "Integrated Security System Architecture", "description": "A vocabulary defining a comprehensive security system architecture with various subsystems and junction points.", "tags": ["vocabulary", "security", "architecture", "integrated-system"], "input": "Create a vocabulary definition for an integrated security system architecture that combines multiple subsystems including alarm, monitoring, and sensor components.", "output": "vocabulary http://example.com/secure/architecture# as secure {\n\textends http://example.com/methodology/system# as system\n\textends http://example.com/homesecurity/architecture# as hsa\n\textends http://example.com/smart/sensors# as smart\n\textends http://example.com/safe/alarms# as safe\n\textends http://example.com/supreme/monitors# as supreme\n\tconcept SecuritySystem < hsa:SecuritySystem [\n\t\trestricts system:presents to exactly 1 I1\n\t\trestricts system:presents to exactly 1 I2\n\t\trestricts system:contains to min 2 smart:SmokeSensor\n\t\trestricts system:contains to min 1 smart:MotionSensor\n\t\trestricts system:contains to exactly 1 safe:AlarmSystem\n\t\trestricts system:contains to exactly 1 supreme:MonitoringSystem\n\t]\n\tconcept I1 < hsa:I1\n\tconcept I2 < hsa:I2\n\t// Junction 1\n\tconcept Junction1 < hsa:Junction1 [\n\t\trestricts system:joins to exactly 1 I1\n\t\trestricts system:joins to exactly 1 safe:I5\n\t]\n\t// Junction 2\n\tconcept Junction2 < hsa:Junction2 [\n\t\trestricts system:joins to exactly 1 supreme:I8\n\t\trestricts system:joins to exactly 1 I2\n\t]\n\t// Junction 3\n\tconcept Junction3.S < hsa:Junction3 [\n\t\trestricts system:joins to exactly 1 smart:I3.S\n\t\trestricts system:joins to exactly 1 safe:I4\n\t]\n\tconcept Junction3.M < hsa:Junction3 [\n\t\trestricts system:joins to exactly 1 smart:I3.M\n\t\trestricts system:joins to exactly 1 safe:I4\n\t]\n\t// Junction 4\n\tconcept Junction4 < hsa:Junction4 [\n\t\trestricts system:joins to exactly 1 safe:I6\n\t\trestricts system:joins to exactly 1 supreme:I7\n\t]\n}"}
{"id": "home_security_alarms_001", "title": "Home Security Alarm System Vocabulary", "description": "A vocabulary defining a home security alarm system with components, interfaces, and messaging concepts.", "tags": ["vocabulary", "security", "alarm-system", "architecture"], "input": "Create a vocabulary definition for a home security alarm system with component relationships and interface definitions.", "output": "vocabulary http://example.com/safe/alarms# as safe {\n\t\n\textends http://example.com/homesecurity/architecture# as hsa\n\textends http://example.com/methodology/system# as system\n\tconcept AlarmSystem < hsa:AlarmSystem [\n\t\trestricts system:presents to exactly 1 I4\n\t\trestricts system:presents to exactly 1 I5\n\t\trestricts system:presents to exactly 1 I6\n\t\trestricts system:presents to max 1 I9\n\t]\n\t\n\tconcept I4 < hsa:I4\n\tconcept I5 < hsa:I5\n\tconcept I6 < hsa:I6\n\tconcept I9 < system:Interface [\n\t\trestricts all system:transfersOut to Sound\n\t]\n\t\n\tconcept Speaker < system:Component [\n\t\trestricts system:presents to exactly 1 I10\n\t]\n\t\n\tconcept I10 < system:Interface [\n\t\trestricts all system:transfersIn to Sound\n\t]\n\tconcept Junction5 < system:Junction [\n\t\trestricts system:joins to exactly 1 I9\n\t\trestricts system:joins to exactly 1 I10\n\t\trestricts all system:isTraversedBy to Sound \n\t]\n\tconcept Sound < system:Message\n\t\n}"}
{"id": "dcterms_vocabulary_001", "title": "Dublin Core Terms Vocabulary", "description": "A simplified Dublin Core Terms vocabulary with core annotation properties.", "tags": ["vocabulary", "dublin-core", "dcmi", "metadata", "terms"], "input": "Create a basic vocabulary definition for Dublin Core Terms with annotation properties.", "output": "vocabulary http://purl.org/dc/terms/ as dcterms {\\n\\tannotation property ^description\\n\\tannotation property license\\n\\tannotation property title\\n}"}
{"id": "rdfs_vocabulary_001", "title": "RDFS Vocabulary Definition", "description": "The RDFS vocabulary as a subset of W3C vocabulary with annotations.", "tags": ["vocabulary", "rdfs", "w3c"], "input": "Create a vocabulary definition for RDFS with appropriate annotations and extensions.", "output": "@dc:creator \"W3C\"\\n@dc:rights \"Copyright 2001 W3C.\"\\n@dc:description \"The RDFS vocabulary is a subset of the vocabulary maintained by the W3C.\"\\n@dc:title \"RDFS\"\\nvocabulary http://www.w3.org/2000/01/rdf-schema# as rdfs {\\n\\textends http://purl.org/dc/elements/1.1/ as dc\\n\\tannotation property comment\\n\\tannotation property isDefinedBy\\n\\tannotation property label\\n\\tannotation property seeAlso\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Datatypes\"\\n\\tscalar Literal\\n\\taspect Resource\\n\\n}"}
{"id": "owl2_vocabulary_001", "title": "OWL2 Vocabulary Definition", "description": "The OWL2 vocabulary as a subset of W3C vocabulary with annotations and datatype extensions.", "tags": ["vocabulary", "owl2", "w3c", "datatypes"], "input": "Create a vocabulary definition for OWL2 with appropriate annotations, extensions, and datatype definitions.", "output": "@dc:creator \"W3C\"\\n@dc:rights \"Copyright 2002 W3C.\"\\n@dc:source \"https://www.w3.org/TR/owl2-syntax/#ref-xml-schema-datatypes\"\\n@dc:description \"The OWL2 vocabulary is a subset of the vocabulary maintained by the W3C.\"\\n@dc:title \"OWL2\"\\nvocabulary http://www.w3.org/2002/07/owl# as owl {\\n\\textends http://purl.org/dc/elements/1.1/ as dc\\n\\textends http://www.w3.org/2001/XMLSchema# as xsd\\n\\textends http://www.w3.org/2000/01/rdf-schema# as rdfs\\n\\textends http://www.w3.org/1999/02/22-rdf-syntax-ns# as rdf\\n\\taspect Thing\\n\\n\\taspect Nothing\\n\\tannotation property backwardCompatibleWith\\n\\tannotation property deprecated\\n\\tannotation property incompatibleWith\\n\\tannotation property priorVersion\\n\\tannotation property versionInfo\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tscalar real < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tscalar rational < real\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tref scalar xsd:decimal < rational\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\"\\n\\tref scalar xsd:double < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\"\\n\\tref scalar xsd:float < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Strings\"\\n\\tref scalar xsd:string < rdf:PlainLiteral\\n@dc:source \"https://www.w3.org/TR/owl2-syntax/#Boolean_Values\"\\n\\tref scalar xsd:boolean < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\"\\n\\tref scalar xsd:hexBinary < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\"\\n\\tref scalar xsd:base64Binary < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#IRIs_2\"\\n\\tref scalar xsd:anyURI < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Time_Instants\"\\n\\tref scalar xsd:dateTime < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Literals\"\\n\\tref scalar rdf:PlainLiteral < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#XML_Literals\"\\n\\tref scalar rdf:XMLLiteral < rdfs:Literal\\n}"}
{"id": "owl2_vocabulary_002", "title": "OWL2 Vocabulary Definition", "description": "The OWL2 vocabulary as a subset of W3C vocabulary with annotations and datatype extensions.", "tags": ["vocabulary", "owl2", "w3c", "datatypes"], "input": "Create a vocabulary definition for OWL2 with appropriate annotations, extensions, and datatype definitions.", "output": "@dc:creator \"W3C\"\\n@dc:rights \"Copyright 2002 W3C.\"\\n@dc:source \"https://www.w3.org/TR/owl2-syntax/#ref-xml-schema-datatypes\"\\n@dc:description \"The OWL2 vocabulary is a subset of the vocabulary maintained by the W3C.\"\\n@dc:title \"OWL2\"\\nvocabulary http://www.w3.org/2002/07/owl# as owl {\\n\\textends http://purl.org/dc/elements/1.1/ as dc\\n\\textends http://www.w3.org/2001/XMLSchema# as xsd\\n\\textends http://www.w3.org/2000/01/rdf-schema# as rdfs\\n\\textends http://www.w3.org/1999/02/22-rdf-syntax-ns# as rdf\\n\\taspect Thing\\n\\n\\taspect Nothing\\n\\tannotation property backwardCompatibleWith\\n\\tannotation property deprecated\\n\\tannotation property incompatibleWith\\n\\tannotation property priorVersion\\n\\tannotation property versionInfo\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tscalar real < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tscalar rational < real\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\"\\n\\tref scalar xsd:decimal < rational\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\"\\n\\tref scalar xsd:double < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\"\\n\\tref scalar xsd:float < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Strings\"\\n\\tref scalar xsd:string < rdf:PlainLiteral\\n@dc:source \"https://www.w3.org/TR/owl2-syntax/#Boolean_Values\"\\n\\tref scalar xsd:boolean < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\"\\n\\tref scalar xsd:hexBinary < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\"\\n\\tref scalar xsd:base64Binary < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#IRIs_2\"\\n\\tref scalar xsd:anyURI < rdfs:Literal\\n\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Time_Instants\"\\n\\tref scalar xsd:dateTime < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Literals\"\\n\\tref scalar rdf:PlainLiteral < rdfs:Literal\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#XML_Literals\"\\n\\tref scalar rdf:XMLLiteral < rdfs:Literal\\n}"}
{"id": "uml_primitive_types_001", "title": "UML Primitive Types Vocabulary", "description": "A vocabulary defining UML primitive types mapped to XSD and OWL types.", "tags": ["vocabulary", "uml", "primitive-types", "omg"], "input": "Create a vocabulary definition for UML primitive types with appropriate annotations and type mappings.", "output": "@rdfs:label \"types\"\\nvocabulary https://www.omg.org/spec/UML/PrimitiveTypes# as primitives {\\n\\textends http://www.w3.org/2000/01/rdf-schema# as rdfs\\n\\textends http://www.w3.org/2001/XMLSchema# as xsd\\n\\textends http://www.w3.org/2002/07/owl# as owl\\n\\t@rdfs:label \"Boolean\"\\n\\t@rdfs:comment \"Boolean is used for logical expressions, consisting of the predefined values true and false.\"\\n\\tscalar Boolean = xsd:boolean\\n\\t@rdfs:label \"Integer\"\\n\\t@rdfs:comment \"Integer is a primitive type representing integer values.\"\\n\\tscalar Integer = xsd:int\\n\\t@rdfs:label \"Real\"\\n\\t@rdfs:comment \"Real is a primitive type representing the mathematical concept of real.\"\\n\\tscalar Real = owl:real\\n\\t@rdfs:label \"UnlimitedNatural\"\\n\\t@rdfs:comment \"UnlimitedNatural is a primitive type representing unlimited natural values.\"\\n\\tscalar UnlimitedNatural = xsd:int\\n\\t@rdfs:label \"String\"\\n\\t@rdfs:comment \"String is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters.\"\\n\\tscalar String = xsd:string\\n}"}
{"id": "dc_vocabulary_002", "title": "Dublin Core Metadata Vocabulary", "description": "The Dublin Core (DC) vocabulary subset maintained by the DCMI Usage Board.", "tags": ["vocabulary", "dublin-core", "dcmi", "metadata"], "input": "Create a vocabulary definition for Dublin Core metadata elements with appropriate annotations.", "output": "@dc:creator \"DCMI Usage Board\"\\n@dc:rights \"Copyright 1995-2019 DCMI.\"\\n@dc:description \"The DC vocabulary is a subset of the vocabulary maintained by the Dublin Core Metadata Initiative.\"\\n@dc:title \"DC\"\\nvocabulary http://purl.org/dc/elements/1.1/ as dc {\\n\\tannotation property contributor\\n\\tannotation property coverage\\n\\tannotation property creator\\n\\tannotation property date\\n\\tannotation property ^description\\n\\tannotation property format\\n\\tannotation property identifier\\n\\tannotation property ^language\\n\\tannotation property publisher\\n\\tannotation property ^relation\\n\\tannotation property rights\\n\\tannotation property ^source\\n\\tannotation property subject\\n\\tannotation property title\\n\\tannotation property type\\n\\tannotation property hasVersion\\n}"}
{"id": "rdfs_vocabulary_002", "title": "RDFS Core Vocabulary Definition", "description": "The core RDFS vocabulary as a subset of W3C vocabulary with basic annotations.", "tags": ["vocabulary", "rdfs", "w3c", "core"], "input": "Create a minimal vocabulary definition for RDFS with core annotation properties and the Literal datatype.", "output": "@dc:creator \"W3C\"\\n@dc:rights \"Copyright 2001 W3C.\"\\n@dc:description \"The RDFS vocabulary is a subset of the vocabulary maintained by the W3C.\"\\n@dc:title \"RDFS\"\\nvocabulary http://www.w3.org/2000/01/rdf-schema# as rdfs {\\n\\textends http://purl.org/dc/elements/1.1/ as dc\\n\\tannotation property comment\\n\\tannotation property isDefinedBy\\n\\tannotation property label\\n\\tannotation property seeAlso\\n\\t\\n\\t@dc:source \"https://www.w3.org/TR/owl2-syntax/#Datatypes\"\\n\\tscalar Literal\\n}"}
{"id":"xsd_vocabulary_001","title":"XSD Vocabulary","description":"The XSD vocabulary is a subset of the corresponding vocabulary maintained by the W3C. It includes definitions for real numbers, decimal numbers, integers, floating-point numbers, strings, boolean values, binary data, IRIs, and time instants.","tags":["xsd","w3c","vocabulary","datatypes","xmlschema"],"input":"Define the XSD vocabulary, including scalar types for real numbers, integers, floating-point numbers, strings, boolean values, binary data, IRIs, and time instants.","output":"vocabulary <http://www.w3.org/2001/XMLSchema#> as xsd { extends <http://purl.org/dc/elements/1.1/> as dc @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#decimal\" scalar decimal @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#integer\" scalar integer < decimal @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#long\" scalar long < integer @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#int\" scalar int < long @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#short\" scalar short < int @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#byte\" scalar byte < short @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#nonNegativeInteger\" scalar nonNegativeInteger < integer @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#positiveInteger\" scalar positiveInteger < nonNegativeInteger @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#unsignedLong\" scalar unsignedLong < nonNegativeInteger @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#unsignedInt\" scalar unsignedInt < unsignedLong @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#unsignedShort\" scalar unsignedShort < unsignedInt @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#unsignedByte\" scalar unsignedByte < unsignedShort @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#nonPositiveInteger\" scalar nonPositiveInteger < integer @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#negativeInteger\" scalar negativeInteger < nonPositiveInteger @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#double\" scalar double @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#float\" scalar float @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#string\" scalar string @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#normalizedString\" scalar normalizedString < string @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#token\" scalar token < normalizedString @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#language\" scalar ^language < token @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#Name\" scalar Name < token @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#NCName\" scalar NCName < Name @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#NMTOKEN\" scalar NMTOKEN < token @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#boolean\" scalar boolean @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#hexBinary\" scalar hexBinary @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#base64Binary\" scalar base64Binary @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#anyURI\" scalar anyURI @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#dateTime\" scalar dateTime @dc:source \"https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#dateTimeStamp\" scalar dateTimeStamp < dateTime }"}
{"id":"time_vocabulary_001","title":"Time Vocabulary","description":"A temporal entity with zero extent or duration, referred to as a 'Time instant'. This vocabulary extends the RDF Schema vocabulary and defines the 'Instant' aspect.","tags":["time","rdf-schema","temporal","vocabulary"],"input":"Define the Time vocabulary, including a temporal entity with zero extent or duration, labeled as 'Time instant' and the 'Instant' aspect.","output":"vocabulary <http://www.w3.org/2006/time#> as time { extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs @rdfs:comment \"A temporal entity with zero extent or duration\"$en @rdfs:label \"Time instant\"$en aspect Instant }"}
{"id":"owl2_vocabulary_003","title":"OWL2 Vocabulary","description":"The OWL2 vocabulary is a subset of the vocabulary maintained by the W3C, defining aspects, annotation properties, and scalar types for use in RDF and OWL2 applications.","tags":["owl2","w3c","rdf-schema","xml-schema","ontology"],"input":"Define the OWL2 vocabulary, extending multiple vocabularies (DC, XSD, RDF, RDFS) and defining aspects like 'Thing' and 'Nothing' along with annotation properties and various scalar types.","output":"vocabulary <http://www.w3.org/2002/07/owl#> as owl { extends <http://purl.org/dc/elements/1.1/> as dc extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.w3.org/1999/02/22-rdf-syntax-ns#> as rdf aspect Thing aspect Nothing annotation property backwardCompatibleWith annotation property deprecated annotation property incompatibleWith annotation property priorVersion annotation property versionInfo @dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\" scalar real < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\" scalar rational < real @dc:source \"https://www.w3.org/TR/owl2-syntax/#Real_Numbers.2C_Decimal_Numbers.2C_and_Integers\" ref scalar xsd:decimal < rational @dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\" ref scalar xsd:double < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Floating-Point_Numbers\" ref scalar xsd:float < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Strings\" ref scalar xsd:string < rdf:PlainLiteral @dc:source \"https://www.w3.org/TR/owl2-syntax/#Boolean_Values\" ref scalar xsd:boolean < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\" ref scalar xsd:hexBinary < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Binary_Data\" ref scalar xsd:base64Binary < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#IRIs_2\" ref scalar xsd:anyURI < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Time_Instants\" ref scalar xsd:dateTime < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#Literals\" ref scalar rdf:PlainLiteral < rdfs:Literal @dc:source \"https://www.w3.org/TR/owl2-syntax/#XML_Literals\" ref scalar rdf:XMLLiteral < rdfs:Literal }"}
{"id":"rdfs_vocabulary_003","title":"RDFS Vocabulary","description":"The RDFS vocabulary is a subset of the vocabulary maintained by the W3C, providing basic elements for describing relationships and hierarchies in RDF data.","tags":["rdfs","rdf","w3c","vocabulary"],"input":"Define the RDFS vocabulary, including annotation properties like comment, isDefinedBy, label, and seeAlso, along with a scalar Literal type, extending the DC elements vocabulary from W3C.","output":"vocabulary <http://www.w3.org/2000/01/rdf-schema#> as rdfs { extends <http://purl.org/dc/elements/1.1/> as dc annotation property comment annotation property isDefinedBy annotation property label annotation property seeAlso @dc:source \"https://www.w3.org/TR/owl2-syntax/#Datatypes\" scalar Literal }"}
{"id":"capella_sharedmodel_vocabulary_001","title":"Capella Shared Model Vocabulary","description":"The Capella shared model vocabulary defines core elements related to Capella structures, including relationships between packages, concepts, and elements in a system model.","tags":["capella","sharedmodel","polarsys","rdf","vocabulary"],"input":"Define the Capella Shared Model vocabulary, with concepts like SharedPkg and GenericPkg, and relations for ownedDataPkg, ownedGenericPkg, subGenericPkgs, and capellaElements. Extends core Capella elements, RDF schema, and information packages.","output":"vocabulary <http://www.polarsys.org/capella/core/sharedmodel/6.0.0#> as core.data.sharedmodel { extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore extends <http://www.polarsys.org/capella/core/modeller/6.0.0#> as core.data.capellamodeller extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.polarsys.org/capella/core/information/6.0.0#> as core.data.information @rdfs:label \"SharedPkg\" concept SharedPkg < core.data.capellacore:ReuseableStructure, core.data.capellamodeller:ModelRoot @rdfs:label \"ownedDataPkg\" relation SharedPkg_ownedDataPkg [ from SharedPkg to core.data.information:DataPkg functional ] @rdfs:label \"ownedGenericPkg\" relation SharedPkg_ownedGenericPkg [ from SharedPkg to GenericPkg functional ] @rdfs:label \"GenericPkg\" concept GenericPkg < core.data.capellacore:Structure @rdfs:label \"subGenericPkgs\" relation GenericPkg_subGenericPkgs [ from GenericPkg to GenericPkg ] @rdfs:label \"capellaElements\" relation GenericPkg_capellaElements [ from GenericPkg to core.data.capellacore:CapellaElement ] }"}
{"id":"capella_requirement_vocabulary_001","title":"Capella Requirement Vocabulary","description":"The Capella requirement vocabulary defines concepts related to system requirements, including relationships between requirements, traceability, and associated properties.","tags":["capella","requirement","polarsys","rdf","vocabulary"],"input":"Define the Capella Requirement vocabulary, with concepts like RequirementsPkg, Requirement, and SystemFunctionalRequirement, and relations like ownedRequirements, ownedRequirementPkgs, source, target, and relatedCapellaElements.","output":"vocabulary <http://www.polarsys.org/capella/core/requirement/6.0.0#> as core.data.requirement { extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://www.polarsys.org/capella/common/core/6.0.0#> as common.data.core @rdfs:label \"RequirementsPkg\" concept RequirementsPkg < core.data.capellacore:Structure @rdfs:label \"additionalInformation\" scalar property RequirementsPkg_additionalInformation [ domain RequirementsPkg range xsd:string functional ] @rdfs:label \"level\" scalar property RequirementsPkg_level [ domain RequirementsPkg range xsd:string functional ] @rdfs:label \"ownedRequirements\" relation RequirementsPkg_ownedRequirements [ from RequirementsPkg to Requirement ] @rdfs:label \"ownedRequirementPkgs\" relation RequirementsPkg_ownedRequirementPkgs [ from RequirementsPkg to RequirementsPkg ] @rdfs:label \"RequirementsTrace\" concept RequirementsTrace < core.data.capellacore:Trace [ restricts RequirementsTrace_source to exactly 1 restricts RequirementsTrace_target to exactly 1 ] @rdfs:label \"source\" relation RequirementsTrace_source [ from RequirementsTrace to common.data.core:TraceableElement functional ] @rdfs:label \"target\" relation RequirementsTrace_target [ from RequirementsTrace to common.data.core:TraceableElement functional ] @rdfs:label \"Requirement\" aspect Requirement < core.data.capellacore:Namespace @rdfs:label \"isObsolete\" scalar property Requirement_isObsolete [ domain Requirement range xsd:boolean functional ] @rdfs:label \"requirementId\" scalar property Requirement_requirementId [ domain Requirement range xsd:string functional ] @rdfs:label \"additionalInformation\" scalar property Requirement_additionalInformation [ domain Requirement range xsd:string functional ] @rdfs:label \"verificationMethod\" scalar property Requirement_verificationMethod [ domain Requirement range xsd:string functional ] @rdfs:label \"verificationPhase\" scalar property Requirement_verificationPhase [ domain Requirement range xsd:string functional ] @rdfs:label \"implementationVersion\" scalar property Requirement_implementationVersion [ domain Requirement range xsd:string functional ] @rdfs:label \"feature\" scalar property Requirement_feature [ domain Requirement range xsd:string functional ] @rdfs:label \"relatedCapellaElements\" relation Requirement_relatedCapellaElements [ from Requirement to core.data.capellacore:CapellaElement ] @rdfs:label \"SystemFunctionalInterfaceRequirement\" concept SystemFunctionalInterfaceRequirement < Requirement @rdfs:label \"SystemFunctionalRequirement\" concept SystemFunctionalRequirement < Requirement @rdfs:label \"SystemNonFunctionalInterfaceRequirement\" concept SystemNonFunctionalInterfaceRequirement < Requirement @rdfs:label \"SystemNonFunctionalRequirement\" concept SystemNonFunctionalRequirement < Requirement @rdfs:label \"SystemUserRequirement\" concept SystemUserRequirement < Requirement }"}
{"id":"capella_deployment_vocabulary_001","title":"Capella Deployment Vocabulary","description":"The Capella deployment vocabulary defines concepts and relations related to physical components, instances, and deployments in a system model, including deployment configurations and links.","tags":["capella","deployment","pa","cs","fa","polarsys","rdf","vocabulary"],"input":"Define the Capella Deployment vocabulary, with concepts like ComponentInstance, ConnectionInstance, DeploymentAspect, and DeploymentConfiguration, and relations like portInstances, ownedAbstractPhysicalInstances, ownedInstanceDeploymentLinks, ownedConfigurations, ownedDeploymentLinks, and PartDeploymentLink.","output":"vocabulary <http://www.polarsys.org/capella/core/pa/deployment/6.0.0#> as core.data.pa.deployment { extends <http://www.polarsys.org/capella/core/cs/6.0.0#> as core.data.cs extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.polarsys.org/capella/core/pa/6.0.0#> as core.data.pa extends <http://www.polarsys.org/capella/core/fa/6.0.0#> as core.data.fa extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore @rdfs:label \"ComponentInstance\" concept ComponentInstance < AbstractPhysicalInstance, core.data.cs:DeployableElement, core.data.cs:DeploymentTarget @rdfs:label \"portInstances\" relation ComponentInstance_portInstances [ from ComponentInstance to PortInstance ] @rdfs:label \"ownedAbstractPhysicalInstances\" relation ComponentInstance_ownedAbstractPhysicalInstances [ from ComponentInstance to AbstractPhysicalInstance ] @rdfs:label \"ownedInstanceDeploymentLinks\" relation ComponentInstance_ownedInstanceDeploymentLinks [ from ComponentInstance to InstanceDeploymentLink ] @rdfs:label \"type\" relation ComponentInstance_type [ from ComponentInstance to core.data.pa:PhysicalComponent functional ] @rdfs:label \"ConnectionInstance\" concept ConnectionInstance < AbstractPhysicalInstance @rdfs:label \"connectionEnds\" relation ConnectionInstance_connectionEnds [ from ConnectionInstance to PortInstance @rdfs:label \"connections\" reverse PortInstance_connections ] @rdfs:label \"type\" relation ConnectionInstance_type [ from ConnectionInstance to core.data.fa:ComponentExchange functional ] @rdfs:label \"DeploymentAspect\" concept DeploymentAspect < core.data.capellacore:Structure @rdfs:label \"ownedConfigurations\" relation DeploymentAspect_ownedConfigurations [ from DeploymentAspect to DeploymentConfiguration ] @rdfs:label \"ownedDeploymentAspects\" relation DeploymentAspect_ownedDeploymentAspects [ from DeploymentAspect to DeploymentAspect ] @rdfs:label \"DeploymentConfiguration\" concept DeploymentConfiguration < core.data.capellacore:NamedElement @rdfs:label \"ownedDeploymentLinks\" relation DeploymentConfiguration_ownedDeploymentLinks [ from DeploymentConfiguration to core.data.cs:AbstractDeploymentLink ] @rdfs:label \"ownedPhysicalInstances\" relation DeploymentConfiguration_ownedPhysicalInstances [ from DeploymentConfiguration to AbstractPhysicalInstance ] @rdfs:label \"InstanceDeploymentLink\" concept InstanceDeploymentLink < core.data.cs:AbstractDeploymentLink @rdfs:label \"PartDeploymentLink\" concept PartDeploymentLink < core.data.cs:AbstractDeploymentLink @rdfs:label \"AbstractPhysicalInstance\" aspect AbstractPhysicalInstance < core.data.capellacore:CapellaElement @rdfs:label \"PortInstance\" concept PortInstance < AbstractPhysicalInstance [ restricts PortInstance_component to exactly 1 ] @rdfs:label \"component\" relation PortInstance_component [ from PortInstance to ComponentInstance functional ] @rdfs:label \"type\" relation PortInstance_type [ from PortInstance to core.data.fa:ComponentPort functional ] @rdfs:label \"TypeDeploymentLink\" concept TypeDeploymentLink < core.data.cs:AbstractDeploymentLink }"}
{"id":"capella_modeller_vocabulary_001","title":"Capella Modeller Vocabulary","description":"The Capella Modeller vocabulary defines concepts and relations related to the modelling of system engineering projects, including projects, folders, model roots, and system engineering elements.","tags":["capella","modeller","system engineering","core","vocabulary"],"input":"Define the Capella Modeller vocabulary, with concepts like Project, Folder, ModelRoot, SystemEngineering, and SystemEngineeringPkg, and relations like keyValuePairs, ownedFolders, ownedModelRoots, containedOperationalAnalysis, containedSystemAnalysis, containedLogicalArchitectures, containedPhysicalArchitectures, containedEPBSArchitectures, and ownedSystemEngineerings.","output":"vocabulary <http://www.polarsys.org/capella/core/modeller/6.0.0#> as core.data.capellamodeller { extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.polarsys.org/capella/core/oa/6.0.0#> as core.data.oa extends <http://www.polarsys.org/capella/core/ctx/6.0.0#> as core.data.ctx extends <http://www.polarsys.org/capella/core/la/6.0.0#> as core.data.la extends <http://www.polarsys.org/capella/core/pa/6.0.0#> as core.data.pa extends <http://www.polarsys.org/capella/core/epbs/6.0.0#> as core.data.epbs extends <http://www.polarsys.org/capella/core/sharedmodel/6.0.0#> as core.data.sharedmodel @rdfs:label \"Project\" concept Project < core.data.capellacore:Structure @rdfs:label \"keyValuePairs\" relation Project_keyValuePairs [ from Project to core.data.capellacore:KeyValue ] @rdfs:label \"ownedFolders\" relation Project_ownedFolders [ from Project to Folder ] @rdfs:label \"ownedModelRoots\" relation Project_ownedModelRoots [ from Project to ModelRoot ] @rdfs:label \"Folder\" concept Folder < core.data.capellacore:Structure @rdfs:label \"ownedFolders\" relation Folder_ownedFolders [ from Folder to Folder ] @rdfs:label \"ownedModelRoots\" relation Folder_ownedModelRoots [ from Folder to ModelRoot ] @rdfs:label \"ModelRoot\" aspect ModelRoot < core.data.capellacore:CapellaElement @rdfs:label \"SystemEngineering\" concept SystemEngineering < core.data.capellacore:AbstractModellingStructure, ModelRoot @rdfs:label \"containedOperationalAnalysis\" relation SystemEngineering_containedOperationalAnalysis [ from SystemEngineering to core.data.oa:OperationalAnalysis ] @rdfs:label \"containedSystemAnalysis\" relation SystemEngineering_containedSystemAnalysis [ from SystemEngineering to core.data.ctx:SystemAnalysis ] @rdfs:label \"containedLogicalArchitectures\" relation SystemEngineering_containedLogicalArchitectures [ from SystemEngineering to core.data.la:LogicalArchitecture ] @rdfs:label \"containedPhysicalArchitectures\" relation SystemEngineering_containedPhysicalArchitectures [ from SystemEngineering to core.data.pa:PhysicalArchitecture ] @rdfs:label \"containedEPBSArchitectures\" relation SystemEngineering_containedEPBSArchitectures [ from SystemEngineering to core.data.epbs:EPBSArchitecture ] @rdfs:label \"containedSharedPkgs\" relation SystemEngineering_containedSharedPkgs [ from SystemEngineering to core.data.sharedmodel:SharedPkg ] @rdfs:label \"SystemEngineeringPkg\" concept SystemEngineeringPkg < core.data.capellacore:Structure, ModelRoot @rdfs:label \"ownedSystemEngineerings\" relation SystemEngineeringPkg_ownedSystemEngineerings [ from SystemEngineeringPkg to SystemEngineering ] @rdfs:label \"Library\" concept Library < Project }"}
{"id":"capella_information_communication_vocabulary_001","title":"Capella Information Communication Vocabulary","description":"The Capella Information Communication vocabulary defines concepts and relations related to communication items, links, signals, exceptions, messages, and their related properties, states, and behaviors in system engineering models.","tags":["capella","information","communication","core","vocabulary"],"input":"Define the Capella Information Communication vocabulary, with concepts like CommunicationItem, Exception, Message, MessageReference, Signal, SignalInstance, and CommunicationLink, along with properties and relations such as visibility, ownedStateMachines, properties, signalInstances, kind, protocol, and various types of communication link behaviors.","output":"vocabulary <http://www.polarsys.org/capella/core/information/communication/6.0.0#> as core.data.information.communication { extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore extends <http://www.polarsys.org/capella/core/information/datavalue/6.0.0#> as core.data.information.datavalue extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.polarsys.org/capella/core/common/6.0.0#> as core.data.capellacommon extends <http://www.polarsys.org/capella/core/information/6.0.0#> as core.data.information extends <http://www.polarsys.org/capella/common/behavior/6.0.0#> as common.data.behavior @rdfs:label \"CommunicationItem\" aspect CommunicationItem < core.data.capellacore:Classifier, core.data.information.datavalue:DataValueContainer @rdfs:label \"visibility\" scalar property CommunicationItem_visibility [ domain CommunicationItem range core.data.capellacore:VisibilityKind functional ] @rdfs:label \"ownedStateMachines\" relation CommunicationItem_ownedStateMachines [ from CommunicationItem to core.data.capellacommon:StateMachine ] @rdfs:label \"properties\" relation CommunicationItem_properties [ from CommunicationItem to core.data.information:Property ] @rdfs:label \"Exception\" concept Exception < CommunicationItem @rdfs:label \"Message\" concept Message < CommunicationItem @rdfs:label \"MessageReference\" concept MessageReference < core.data.capellacore:Relationship [ restricts MessageReference_message to exactly 1 ] @rdfs:label \"message\" relation MessageReference_message [ from MessageReference to Message functional ] @rdfs:label \"MessageReferencePkg\" aspect MessageReferencePkg < core.data.capellacore:Structure @rdfs:label \"ownedMessageReferences\" relation MessageReferencePkg_ownedMessageReferences [ from MessageReferencePkg to MessageReference ] @rdfs:label \"Signal\" concept Signal < CommunicationItem, common.data.behavior:AbstractSignal @rdfs:label \"signalInstances\" relation Signal_signalInstances [ from Signal to SignalInstance ] @rdfs:label \"SignalInstance\" concept SignalInstance < core.data.information:AbstractInstance @rdfs:label \"CommunicationLinkKind\" scalar CommunicationLinkKind [ oneOf \"UNSET\", \"PRODUCE\", \"CONSUME\", \"SEND\", \"RECEIVE\", \"CALL\", \"EXECUTE\", \"WRITE\", \"ACCESS\", \"ACQUIRE\", \"TRANSMIT\" ] @rdfs:label \"CommunicationLinkProtocol\" scalar CommunicationLinkProtocol [ oneOf \"UNSET\", \"UNICAST\", \"MULTICAST\", \"BROADCAST\", \"SYNCHRONOUS\", \"ASYNCHRONOUS\", \"READ\", \"ACCEPT\" ] @rdfs:label \"CommunicationLink\" concept CommunicationLink < core.data.capellacore:CapellaElement @rdfs:label \"kind\" scalar property CommunicationLink_kind [ domain CommunicationLink range CommunicationLinkKind functional ] @rdfs:label \"protocol\" scalar property CommunicationLink_protocol [ domain CommunicationLink range CommunicationLinkProtocol functional ] @rdfs:label \"exchangeItem\" relation CommunicationLink_exchangeItem [ from CommunicationLink to core.data.information:ExchangeItem functional ] @rdfs:label \"CommunicationLinkExchanger\" aspect CommunicationLinkExchanger @rdfs:label \"ownedCommunicationLinks\" relation CommunicationLinkExchanger_ownedCommunicationLinks [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"produce\" relation CommunicationLinkExchanger_produce [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"consume\" relation CommunicationLinkExchanger_consume [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"send\" relation CommunicationLinkExchanger_send [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"receive\" relation CommunicationLinkExchanger_receive [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"call\" relation CommunicationLinkExchanger_call [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"execute\" relation CommunicationLinkExchanger_execute [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"write\" relation CommunicationLinkExchanger_write [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"access\" relation CommunicationLinkExchanger_access [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"acquire\" relation CommunicationLinkExchanger_acquire [ from CommunicationLinkExchanger to CommunicationLink ] @rdfs:label \"transmit\" relation CommunicationLinkExchanger_transmit [ from CommunicationLinkExchanger to CommunicationLink ] }"}
{"id":"capella_epbs_vocabulary_002","title":"Capella EPBS Vocabulary","description":"The Capella EPBS (Extended Product Breakdown Structure) vocabulary defines concepts and relations related to EPBS architecture, configuration items, physical architecture realizations, and related components in system engineering models.","tags":["capella","epbs","architecture","configuration","physical","core","vocabulary"],"input":"Define the Capella EPBS vocabulary, with concepts like EPBSArchitecturePkg, EPBSArchitecture, ConfigurationItemPkg, ConfigurationItem, PhysicalArchitectureRealization, and PhysicalArtifactRealization, along with properties and relations such as ownedEPBSArchitectures, ownedConfigurationItemPkg, allocatedPhysicalArchitectureRealizations, kind, itemIdentifier, and realizedPhysicalArtifact.","output":"vocabulary <http://www.polarsys.org/capella/core/epbs/6.0.0#> as core.data.epbs { extends <http://www.polarsys.org/capella/core/cs/6.0.0#> as core.data.cs extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs extends <http://www.polarsys.org/capella/core/la/6.0.0#> as core.data.la extends <http://www.polarsys.org/capella/core/pa/6.0.0#> as core.data.pa extends <http://www.polarsys.org/capella/core/common/6.0.0#> as core.data.capellacommon extends <http://www.w3.org/2001/XMLSchema#> as xsd extends <http://www.polarsys.org/capella/core/core/6.0.0#> as core.data.capellacore @rdfs:label \"EPBSArchitecturePkg\" concept EPBSArchitecturePkg < core.data.cs:BlockArchitecturePkg @rdfs:label \"ownedEPBSArchitectures\" relation EPBSArchitecturePkg_ownedEPBSArchitectures [ from EPBSArchitecturePkg to EPBSArchitecture ] @rdfs:label \"EPBSArchitecture\" concept EPBSArchitecture < core.data.cs:ComponentArchitecture @rdfs:label \"ownedConfigurationItemPkg\" relation EPBSArchitecture_ownedConfigurationItemPkg [ from EPBSArchitecture to ConfigurationItemPkg functional ] @rdfs:label \"containedCapabilityRealizationPkg\" relation EPBSArchitecture_containedCapabilityRealizationPkg [ from EPBSArchitecture to core.data.la:CapabilityRealizationPkg functional ] @rdfs:label \"ownedPhysicalArchitectureRealizations\" relation EPBSArchitecture_ownedPhysicalArchitectureRealizations [ from EPBSArchitecture to PhysicalArchitectureRealization ] @rdfs:label \"allocatedPhysicalArchitectureRealizations\" relation EPBSArchitecture_allocatedPhysicalArchitectureRealizations [ from EPBSArchitecture to PhysicalArchitectureRealization ] @rdfs:label \"allocatedPhysicalArchitectures\" relation EPBSArchitecture_allocatedPhysicalArchitectures [ from EPBSArchitecture to core.data.pa:PhysicalArchitecture @rdfs:label \"allocatingEpbsArchitectures\" reverse PhysicalArchitecture_allocatingEpbsArchitectures ] @rdfs:label \"ConfigurationItemPkg\" concept ConfigurationItemPkg < core.data.cs:ComponentPkg @rdfs:label \"ownedConfigurationItems\" relation ConfigurationItemPkg_ownedConfigurationItems [ from ConfigurationItemPkg to ConfigurationItem ] @rdfs:label \"ownedConfigurationItemPkgs\" relation ConfigurationItemPkg_ownedConfigurationItemPkgs [ from ConfigurationItemPkg to ConfigurationItemPkg ] @rdfs:label \"ConfigurationItem\" concept ConfigurationItem < core.data.capellacommon:CapabilityRealizationInvolvedElement, core.data.cs:Component @rdfs:label \"itemIdentifier\" scalar property ConfigurationItem_itemIdentifier [ domain ConfigurationItem range xsd:string functional ] @rdfs:label \"kind\" scalar property ConfigurationItem_kind [ domain ConfigurationItem range ConfigurationItemKind functional ] @rdfs:label \"ownedConfigurationItems\" relation ConfigurationItem_ownedConfigurationItems [ from ConfigurationItem to ConfigurationItem ] @rdfs:label \"ownedConfigurationItemPkgs\" relation ConfigurationItem_ownedConfigurationItemPkgs [ from ConfigurationItem to ConfigurationItemPkg ] @rdfs:label \"ownedPhysicalArtifactRealizations\" relation ConfigurationItem_ownedPhysicalArtifactRealizations [ from ConfigurationItem to PhysicalArtifactRealization ] @rdfs:label \"allocatedPhysicalArtifacts\" relation ConfigurationItem_allocatedPhysicalArtifacts [ from ConfigurationItem to core.data.cs:AbstractPhysicalArtifact @rdfs:label \"allocatorConfigurationItems\" reverse AbstractPhysicalArtifact_allocatorConfigurationItems ] @rdfs:label \"ConfigurationItemKind\" scalar ConfigurationItemKind [ oneOf \"Unset\", \"COTSCI\", \"CSCI\", \"HWCI\", \"InterfaceCI\", \"NDICI\", \"PrimeItemCI\", \"SystemCI\" ] @rdfs:label \"PhysicalArchitectureRealization\" concept PhysicalArchitectureRealization < core.data.cs:ArchitectureAllocation @rdfs:label \"PhysicalArtifactRealization\" concept PhysicalArtifactRealization < core.data.capellacore:Allocation [ restricts PhysicalArtifactRealization_realizedPhysicalArtifact to exactly 1 restricts PhysicalArtifactRealization_realizingConfigurationItem to exactly 1 ] @rdfs:label \"realizedPhysicalArtifact\" relation PhysicalArtifactRealization_realizedPhysicalArtifact [ from PhysicalArtifactRealization to core.data.cs:AbstractPhysicalArtifact functional ] @rdfs:label \"realizingConfigurationItem\" relation PhysicalArtifactRealization_realizingConfigurationItem [ from PhysicalArtifactRealization to ConfigurationItem functional ] }"}
{"id": "d3fend_vocabulary_001", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including ANN-based Clustering.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@definition \\\"Combines the principles of Artificial Neural Networks (ANN) and clustering methods.\\\"\\n\\t@kb-article \\\"## References Wikipedia. (n.d.). Artificial neural network. [Link](https://en.wikipedia.org/wiki/Artificial_neural_network)\\\"\\n\\t@todo \\\"have a gander at this paper for more clustering techniques ? https://www.sciencedirect.com/science/article/pii/S089360800900207X?viewFullText=true#sec19\\\"\\n\\t@rdfs:label \\\"ANN-based Clustering\\\"\\n\\taspect ANN-basedClustering < ClusterAnalysis\\n}"}
{"id": "d3fend_vocabulary_002", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships, including ANN-based Clustering and ARIMA Model.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND", "ANN", "ARIMA"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including ANN-based Clustering and ARIMA Model.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@definition \\\"Combines the principles of Artificial Neural Networks (ANN) and clustering methods.\\\"\\n\\t@kb-article \\\"## References Wikipedia. (n.d.). Artificial neural network. [Link](https://en.wikipedia.org/wiki/Artificial_neural_network)\\\"\\n\\t@todo \\\"have a gander at this paper for more clustering techniques ? https://www.sciencedirect.com/science/article/pii/S089360800900207X?viewFullText=true#sec19\\\"\\n\\t@rdfs:label \\\"ANN-based Clustering\\\"\\n\\taspect ANN-basedClustering < ClusterAnalysis\\n\\n\\t@definition \\\"An autoregressive integrated moving average (ARIMA) model is a generalization of an autoregressive moving average (ARMA) model.\\\"\\n\\t@kb-article \\\"## References Wikipedia. (n.d.). Autoregressive integrated moving average. [Link](https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average)\\\"\\n\\t@synonym \\\"Autoregressive Integrated Moving Average Model\\\"\\n\\t@rdfs:label \\\"ARIMA Model\\\"\\n\\taspect ARIMAModel < TimeSeriesAnalysis\\n}"}
{"id": "d3fend_vocabulary_003", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships, including ARMA Model.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND", "ARMA"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including ARMA Model.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@definition \\\"Autoregressive-moving-average (ARMA) models provide a parsimonious description of a (weakly) stationary stochastic process in terms of two polynomials, one for the autoregression (AR) and the second for the moving average (MA).\\\"\\n\\t@kb-article \\\"## References Wikipedia. (n.d.). Autoregressive-moving-average model. [Link](https://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model)\\\"\\n\\t@synonym \\\"Autoregressive moving average model\\\"\\n\\t@rdfs:label \\\"ARMA Model\\\"\\n\\taspect ARMA_Model < TimeSeriesAnalysis\\n}"}
{"id": "d3fend_vocabulary_004", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships, including ATTACK Mitigation.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND", "ATTACK Mitigation"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including ATTACK Mitigation.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@rdfs:label \\\"ATTACK Mitigation\\\"\\n\\taspect ATTACKMitigation < ATTACKThing [\\n\\t\\trestricts some d3fend-comment to xsd:string\\n\\t\\trestricts some semantic-relation to DefensiveTechnique\\n\\t]\\n}"}
{"id": "d3fend_vocabulary_005", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships, including ATTACK Thing.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND", "ATTACK Thing"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including ATTACK Thing.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@definition \\\"ATTACK things are concepts defined in the ATT&CK Framework.\\\"\\n\\t@rdfs:label \\\"ATTACK Thing\\\"\\n\\taspect ATTACKThing\\n}"}
{"id": "d3fend_vocabulary_006", "title": "D3FEND Knowledge Graph", "description": "A cybersecurity ontology defining countermeasure concepts and their relationships, including Access Control Configuration.", "tags": ["cybersecurity", "ontology", "knowledge-graph", "countermeasures", "D3FEND", "Access Control"], "input": "Define a cybersecurity ontology extending DCTerms, RDFS, XMLSchema, OWL, and SKOS, including Access Control Configuration.", "output": "vocabulary <http://d3fend.mitre.org/ontologies/d3fend.owl#> as d3fend.owl {\\n\\textends <http://purl.org/dc/terms/> as dcterms\\n\\textends <http://www.w3.org/2000/01/rdf-schema#> as rdfs\\n\\textends <http://www.w3.org/2001/XMLSchema#> as xsd\\n\\textends <http://www.w3.org/2002/07/owl#> as owl\\n\\textends <http://www.w3.org/2004/02/skos/core#> as skos\\n\\n\\t@definition \\\"Information about what access permissions are granted to particular users for particular objects.\\\"\\n\\t@rdfs:label \\\"Access Control Configuration\\\"\\n\\t@rdfs:seeAlso \\\"http://dbpedia.org/resource/Access-control_list\\\"\\n\\taspect AccessControlConfiguration < ConfigurationResource\\n}"}
